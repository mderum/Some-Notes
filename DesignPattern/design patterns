Java 

Singletone -> Only one instance, can be used for logging and configuration
Factory Method -> provides a interface for object creation , subclassed after implementing can alter the type 
Builder Patter ->  Construct objects steps by step , useless for object with many optional params 
prototype -> creates new object by copying existing , when new ()  is expensive Ops
Adapter -> incompatible interfaces to work together 


Spring Boot: 
Singleton -> each bean is created once and reused by default
Factory method -> uses FactoryBean interace to create , FactoryBean<ClassType> , getObject() , @Bean , ApplocationContext.getBean()
DI / IOC -> allows to receive deps from external sources rather than creating themselves
Builder patterns -> for comfiguring complex object and many params object like java ,  HttpHeader builder, mock mvc, UriPathBuilder , spring security chain
Proxy -> in AOP , in logging txn mngmt , @Transactional -> wraps the logic in , Lazy loading -> creates a proxy and when object is really needed object is created and returned.


Microservices: 
Circuit Breaker
Retry 
Timeout
SD 
Rate Limiting
Event Sourcing 
Saga 
ChoreoG
Orch
