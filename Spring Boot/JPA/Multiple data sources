Using postgreSQL and Mysql 


pom.xml  ->>dep needed for different dbs 

       <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>



application.yml
spring:
  datasource:
      postgres:
         jdbcUrl: jdbc:postgresql:localhost:5432/dinerdb
         username: root
         password: pass
         driver-class-name: org.postgresql.Driver  -> not necessary as already present in url 


      mysql:
         jdbcUrl: jdbc:mysql:localhost:3306/productdb
         username: root
         password: password
         driver-class-name: com.mysql.cj.jdbc.Driver  -> not necessary as already present in url 

  jpa:
    show-sql: true
    defer-datasource-initialization: true  -> in case scripts are present



Create DatasourceConfig for each 

For mysql ->

@Configuration
@EnableTransactionManagement  -> enable Txns
@EnableJpaRepository{   --> needed for multiple DB setups if arch are diffferent
  basePackages = "com.hmvCorp.entity.ms" ,  -> where to scan repo interfaces
  entityManagerFactoryRef = "mysqlEMFB" , EM and TM refrences
  trnasactionManagerRef = "mysqlTM"
}
public class DataSourceConfigMs {

Configure datasource 

@ConfigurationProperties( prefix = "spring.datasource.mysql" )
@Bean( "mysqlDS" )
public DataSource mysqlDataSource(){
    return DataSourceBuilder.create().build();


configure EM using above DS 

@Bean( "mysqlEMFB")
public LocalContainerEntityManagerFactoryBean ( EntityManagerFactoryBuilder builder , 
   @Qualifier( "mysqlDS") DataSource dataSource ) {

  return builder.dataSource( dataSource )
                .packages( "com.hmvCorp.entity.ms" )  --> where to scan entity
                .persistenceUnit( "mysqlPU" )  -> requied in multiple DB setup 
                .properties( Map.of( "hibernate.hbm2ddl.auto", "create-drop" 
                                      "hibernate.format_sql" , "true" )  )
                .build();



confiure TM 

@Bean( "mysqlTM" ) -> use this on @Transactional( value= "mysqlTM" ) in service or dao
public PlatformTransactionManager mysqlTransasctionManager( 
@Qualifier("mysqlEMFB) EntityManagerFactory emf  --> although it is a LCEMFB as it implements EMF ) {

      return new JpaTransactionManager(emf); 
}


@Primary
@Bean( "mysqlJdbcTemplate" )
public JdbcTemplate jdbcTemplate( @Qualifier("mysqlDS") DataSource datasource ) {

  return new JdbcTemplate(datasource); 

}



Similar configs for postgresql with DataSource , LCEMFB and PTM , Jdbc template 


