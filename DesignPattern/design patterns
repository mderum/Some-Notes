Java 

Singleton -> Only one instance, can be used for logging and configuration
prototype -> creates new object by copying existing , when new ()  is expensive Ops
Factory Method -> provides a interface for object creation , subclasses after implementing can alter the type 
Builder Patter ->  Construct objects steps by step , usefull for object with many optional params 
Adapter -> incompatible interfaces to work together 

Bean Scopes in Java: 

Singleton -> shared resources like service , dao layer , stateless , global use once loaded , spring context

prototype -> non thread safe resource , stateful , form data etc , temp data , different data each time  , spring context

Request -> single HTTP request flow , upload , validations , web context

Session -> valid for a session of multiple requests , cart , authentication ,web context

WebSocket -> real time data , charts , stocks

Application -> application wide like configs , servletContext , static data that doesnt often change



Spring Boot: 
Singleton -> each bean is created once and reused by default
Factory method -> uses FactoryBean interace to create , FactoryBean<ClassType> , getObject() , @Bean , ApplocationContext.getBean()
DI / IOC -> allows to receive deps from external sources rather than creating themselves
Builder patterns -> for comfiguring complex object and many params object like java ,  HttpHeader builder, mock mvc, UriPathBuilder , spring security chain
Proxy -> in AOP , in logging txn mngmt , @Transactional -> wraps the logic in , Lazy loading -> creates a proxy and when object is really needed object is created and returned.


Microservices: 
Circuit Breaker
Retry 
Timeout
SD 
Rate Limiting
Event Sourcing 
Saga 
ChoreoG
Orch




