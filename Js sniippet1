let msgTimeout = 10;

$(document).ready(function() {
	console.log("axisfd is called");
	getRolloutStatus();
	
	//otp limit code 
	
	//otp count 
	const maxClicks = 3;
	const cooldownTime = 10 * 60 * 1000;
	let clickCountF = 0;//1//2//3
	let clickCountP = 0;//1//2//3
	
	 var proceedToNextOtp = true;
	 var proceedToNextOtpPrint = true;

	 $('#resendOtp').click(function() {
		 
		 clickCountF++;
		 console.log('clickCount  inside button click fx' , clickCountF);

		 if(clickCountF > maxClicks ){

			
			 
			
			 console.log('clickCount  inside limit' , clickCountF);

			 alertify.error("OTP limit reached Please retry after 10mins", msgTimeout);
			 $("#resendOtp").prop("disabled", true);
			 proceedToNextOtp = false;
			 
			 //set timeout and enable button after 10 mins 
			 
				setTimeout(function() {
					console.log('waiting for 10 mins to enable the otp button again ');
					 $("#resendOtp").prop("disabled", false);
					 proceedToNextOtp = true;
					 clickCountF=0;
					 console.log('clickCount  inside timeout log' , clickCountF);

					// Place your code to execute after the delay here
					// This will run after the specified delay (e.g., 3 seconds)
				}, cooldownTime);

		 }
		 
		 // api calls 
				 	if(proceedToNextOtp){
			//fd details save 
			$.ajax({
				url: fdSendOtpURL,
				type: 'POST',
				datatype: 'json',
				data: {
					"agentId": sessionStorage.getItem('axisAgentId'),
					"terminalId": sessionStorage.getItem('axisTerminalId'),
					"fdApplicationReferenceId": sessionStorage.getItem("fdApplicationReferenceId")
		
				},
				success: function(result) {
					var response = JSON.parse(result);
					console.log("sendOtpApi", result);
					if (null != response && response.statusCode == 200 && response.data.isSuccess) {
						alertify.success("OTP SENT SUCCESSFULLY", msgTimeout);
						sessionStorage.setItem("sendOtpApiFdResponse", JSON.stringify(response.data));
					} else {
						console.log("sendOtpApiFd FAIL::", result);
						alertify.error("OTP GENERATION FAILED. Please try after some time!", msgTimeout);
					}
					$('#overlay').hide();
				},
				error: function(xhr, status, error) {
					alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
					$('#overlay').hide();
				},
				complete: function(xhr, status) {
					$('#overlay').hide();
				}
			});
			
			}
				 
		 
		 
		 
	 });
	
	//otp  limit code end for create page 
	 
 $('#resendOtpPrint').click(function() {
		 
		 clickCountP++;
		 console.log('clickCount print inside button click fx' , clickCountP);

		 if(clickCountP > maxClicks ){

			
			 
			
			 console.log('clickCount print inside limit' , clickCountP);

			 alertify.error("OTP limit reached Please retry after 10mins", msgTimeout);
			 $("#resendOtpPrint").prop("disabled", true);
			 proceedToNextOtpPrint = false;
			 
			 //set timeout and enable button after 10 mins 
			 
				setTimeout(function() {
					console.log('waiting for 10 mins to enable the print otp button again ');
					 $("#resendOtpPrint").prop("disabled", false);
					 proceedToNextOtpPrint = true;
					 clickCountP=0;
					 console.log('clickCount print inside timeout log' , clickCountP);

					// Place your code to execute after the delay here
					// This will run after the specified delay (e.g., 3 seconds)
				}, cooldownTime);

		 }
		 
					 // api calls 
				if(proceedToNextOtpPrint){
				
					 var accountNumber = $("#accountNumberPA").val();
					 var confirmaccountNumber = $("#confirmaccountNumberPA").val();
					 var fdAccountNumber = $("#fdLastDigit").val();
					 console.log("fdPrintAdvice is accountNumber , confirmaccountNumber, fdAccountNumber", accountNumber, confirmaccountNumber, fdAccountNumber);
					 sessionStorage.setItem("fdAccountNumber", fdAccountNumber);
					 sessionStorage.setItem("accountNumber", accountNumber);

				
							   //fd details save 
								$.ajax({
									url: fdPrintAdviceURL,
									type: 'POST',
									datatype: 'json',
									data: {
										"accountNumber": accountNumber,
										"fdAccountNumber": fdAccountNumber,
										"agentId": sessionStorage.getItem('axisAgentId'),
										"terminalId": sessionStorage.getItem('axisTerminalId')
									},
									success: function(result) {
										console.log("fdPrintAdviceURL result from api", result);
										var response = JSON.parse(result);
										if (response.status) {
											alertify.success("PRINT OTP SENT", msgTimeout);
											sessionStorage.setItem("fdPrintAdviceResponse", JSON.stringify(response));
										}
										
										else if(response.code =="801"){
											console.log("validateOtpApiFd code:: 801");
											alertify.error("Otp Valdiation Failed: " + response.errors , msgTimeout);
											
										}
										
										
										else {
											console.log("PRINT ADVICE OTP GENERATION FAIL::", result);
											alertify.error("OTP GENERATION FAILED. Please try after some time!", msgTimeout);
										}
										$('#overlay').hide();
									},
									error: function(xhr, status, error) {
										alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
										$('#overlay').hide();
									},
									complete: function(xhr, status) {
										$('#overlay').hide();
									}
								});
							
						}  //proceedToNextOtp 
					 
					 
					 
		 
	 });
	 
	 
	

	 
	 //end otp limit for print page 
	
	

	$("#amountSlider").slider({
		range: "min",
		value: 1,
		min: 5000,
		max: 300000,
		slide: function(event, ui) {
			$("#amountDeposit").val(ui.value);
		}
	});

	$("#amountDeposit").change(function() {
		$("#amountSlider").slider("value", $(this).val());
	});


	//slider fx for cal page 
	$("#amountSliderfc").slider({
		range: "min",
		value: 1,
		min: 5000,
		max: 300000,
		slide: function(event, ui) {
			$("#amountDepositfc").val(ui.value);
		}
	});

	$("#amountDepositfc").change(function() {
		$("#amountSliderfc").slider("value", $(this).val());
	});
	
	//print button code 
	$("#printPdf")
	.click(
			function() {
				console.log("IN-1");
				var divContents = $("#print_acknowledgement")
						.html();
//				var style = $("#style").html();
				var printWindow = window.open('',
						'', 'height=400,width=800');
				printWindow.document
						.write('<html><head><title>FD Receipt</title><style>');
				printWindow.document.write('')
				printWindow.document
						.write('</style></head><body >');
				printWindow.document
						.write(divContents);
				printWindow.document
						.write('</body></html>');
				console.log("In-2");
				printWindow.document.close();
				console.log("In-3");
				printWindow.print();
				console.log("In-4");
			});
	
	
	//
	
	
    // Attach the input event handler to the password field
    $('.numeric-input').on('input', function() {
      // Get the current input value
      var inputValue = $(this).val();

      // Use a regular expression to allow only numeric input
      var numericInput = inputValue.replace(/[^0-9]/g, '');

      // Update the input field with the sanitized value
      $(this).val(numericInput);
    });


	//
    
    $('.alphabetic-input').on('input', function() {
        // Get the current input value
        var inputValue = $(this).val();

        // Use a regular expression to allow only alphabetic input
        var alphabeticInput = inputValue.replace(/[^a-zA-Z]/g, '');

        // Update the input field with the sanitized value
        $(this).val(alphabeticInput);
      });


    //check isminor box if dob is less than 18 years old 
	$("#nomineeDob").change(function() {
		console.log('value selected' , $("#nomineeDob").val()  )
		 var dobString = $("#nomineeDob").val();
		     var dateOfBirth = new Date(dobString.split('/').reverse().join('/'));
			         var today = new Date();

			 
			 					console.log('dateOfBirth' , dateOfBirth  )
			 					
        var age =today.getFullYear() - dateOfBirth.getFullYear();

            if (
										

            today.getMonth() < dateOfBirth.getMonth() ||
            (today.getMonth() === dateOfBirth.getMonth() && today.getDate() < dateOfBirth.getDate())
        ) {	console.log('occured this year'  )
            age--;
        }
								console.log('age' , age  )

			if(age < 18){
				
				console.log('nominee is minor '  )

				//show details in case minor is there
				$("#isNomineeMinor").prop("checked", false);
	   			$("#isNomineeMinor").prop("disabled", true);
	   			$("#guardian_address_grid").show();
	   			$("#guardian_address_grid2").show();
	   			$("#guardian_address_grid3").show();
	   			$("#guardianHD").show();

	   			
			}
			else{
				//hide details in case not minor
				console.log('nominee is not minor  removing guardian details'  )

				$("#isNomineeMinor").prop("checked", true);
	   			$("#isNomineeMinor").prop("disabled", true);
	   			
	   			$("#guardian_address_grid").hide();
	   			$("#guardian_address_grid2").hide();
	   			$("#guardian_address_grid3").hide();
	   			$("#guardianHD").hide();

	   			
				
			}
					
   
	});
    
    
    
    //
    
    

	$("input[name$='depositTenure']").click(function() {
		var radioValue = $(this).val();
		console.log("Radio clicked: " + radioValue);
		if (radioValue == "days") {
			$("#selectYear").prop("disabled", true);
			$("#selectMonth").prop("disabled", true);
		} else {
			$("#selectYear").prop("disabled", false);
			$("#selectMonth").prop("disabled", false);
		}
	});
	
	

	
	
	
}); // End of $(document).ready(function()


// added by Tirthankar

$(function() {
	$("#datepicker").datepicker({
		autoclose: true,
		todayHighlight: true,
		format: 'dd/mm/yyyy',
		endDate: '+0d',
		autoclose: true,
		startDate: '01-01-1920'
	}).datepicker('update', new Date());
});



//function hideAadharDetails(){
//	console.log("fingerprintdevice is called");
//	$("#aadharNumber").hide();
//	$("#fingerprintdevice").show();
//}
//function hidefingerprintdevice(){
//	console.log("nomineeDetails is called");
//	$("#fingerprintdevice").hide();
//	$("#nomineeDetails").show();
//}




//fd print advice flow start 
function validatePrintOtpFd() {
	console.log("validatePrintOtpFd is called");
	
	var statusToProceed = true;
	
	if(!$("#otpPA").val()  || $("#otpPA").val().length<6){
		statusToProceed = false;
		alertify.error("Please Enter Valid OTP", msgTimeout);

		
	}

	

	if(!sessionStorage.getItem("fdPrintAdviceResponse")){
		statusToProceed = false;
		alertify.error("Error in otp generation, Please Re-generate OTP", msgTimeout);

		
	}
	
	
	if (statusToProceed) {
	var otp = $("#otpPA").val();
	
	console.log("validatePrintOtpFd is OTP ", otp);
	let tokenReference = JSON.parse(sessionStorage.getItem("fdPrintAdviceResponse"))["tokenReference"];
	console.log("validatePrintOtpFd is tokenReference ", tokenReference);
	//	let tokenReference ="20230531174136168553509699676910";
	
	
	$.ajax({
		url: validatePrintOtpFdURL,
		type: 'POST',
		datatype: 'json',
		data: {
			"accountNumber": sessionStorage.getItem('accountNumber'),
			"fdAccountNumber": sessionStorage.getItem('fdAccountNumber'),
			"agentId": sessionStorage.getItem('axisAgentId'),
			"terminalId": sessionStorage.getItem('axisTerminalId'),
			"tokenReference": tokenReference,
			"tokenValue": otp

		},
		success: function(result) {
			var response = JSON.parse(result);
			console.log("validatePrintOtpFdURL", response);

			if (response.status) {
				console.log("validatePrintOtpFdURL", response.data.schemeCode);
				alertify.success("PRINT OTP Validated..", msgTimeout);
				// set diplay row data for print ack 
				$("#print_name").text(response.data.customerName);
				$("#print_number").text(response.data.maskedAccountNumber);
				$("#print_amt").text(response.data.depositAmount);
				$("#print_int").text(response.data.interstRate);
				$("#print_sd").text(response.data.startDate);
				$("#print_md").text(response.data.maturityDate);
				$("#print_sc").text(response.data.schemeCode);
				$("#print_pd").text(response.data.periodofDeposit);
				$("#print_mi").text(response.data.maturityInstruction);
				$("#print_bn").text(response.data.branchName);
				$("#print_mop").text(response.data.modeOfOperation);

				$('#otpDetailsPA').hide();
				$('#print_acknowledgement').show();
				sessionStorage.setItem("validatePrintOtpResponse", JSON.stringify(response.data));
			}
			
			
			
			
			
			else {
				console.log("validateOtpApiFd FAIL::", result);
				alertify.error("OTP VALIDATION FAILED. Please try after some time!", msgTimeout);
			}
			$('#overlay').hide();
		},
		error: function(xhr, status, error) {
			alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
			$('#overlay').hide();
		},
		complete: function(xhr, status) {
			$('#overlay').hide();
		}
	});
	
	
	}
}


//fd print advice flow start 
function fdPrintAdvicex() {
	console.log("fdPrintAdvice is called");
	var accountNumber = $("#accountNumberPA").val();
	var confirmaccountNumber = $("#confirmaccountNumberPA").val();
	var fdAccountNumber = $("#fdLastDigit").val();
	console.log("fdPrintAdvice is accountNumber , confirmaccountNumber, fdAccountNumber", accountNumber, confirmaccountNumber, fdAccountNumber);
	var regexForAccountNumber = /^[0-9]{4}1[0-9]{10}$/ ;
	var isValidAccountNumber = regexForAccountNumber.test(accountNumber);
	var isValidConfirmaccountNumber = regexForAccountNumber.test(confirmaccountNumber);

	
	 
	
	if ( (typeof($("#accountNumberPA").val()) === 'string'  &&  $("#accountNumberPA").val() === '')
	 		||  (typeof($("#confirmaccountNumberPA").val()) === 'string'  &&  $("#confirmaccountNumberPA").val() === '')
	 		) {
			statusToProceed = false;
			alertify.error("Please enter Saving Account number", msgTimeout);
		}
	
	
	if (  $("#accountNumberPA").val() !== ''  &&  (!isValidAccountNumber || !isValidConfirmaccountNumber)) {
		statusToProceed = false;
		alertify.error("Please enter valid saving account number", msgTimeout);
	}

	if (accountNumber != confirmaccountNumber) {
		statusToProceed = false;
		alertify.error("Account number entered does not match", msgTimeout);
	}
	sessionStorage.setItem("fdAccountNumber", fdAccountNumber);
	sessionStorage.setItem("accountNumber", accountNumber);

	$.ajax({
		url: fdPrintAdviceURL,
		type: 'POST',
		datatype: 'json',
		data: {
			"accountNumber": accountNumber,
			"fdAccountNumber": fdAccountNumber,
			"agentId": sessionStorage.getItem('axisAgentId'),
			"terminalId": sessionStorage.getItem('axisTerminalId')
		},
		success: function(result) {
			console.log("fdPrintAdviceURL result from api", result);
			var response = JSON.parse(result);
			if (response.status) {
				alertify.success("PRINT OTP SENT", msgTimeout);
				sessionStorage.setItem("fdPrintAdviceResponse", JSON.stringify(response));
			}
			
			if(response.code =="801"){
				console.log("validateOtpApiFd code:: 801");
				alertify.error("Otp Valdiation Failed: " + response.errors , msgTimeout);
				
			}
			
			
			else {
				console.log("PRINT ADVICE OTP GENERATION FAIL::", result);
				alertify.error("OTP GENERATION FAILED. Please try after some time!", msgTimeout);
			}
			$('#overlay').hide();
		},
		error: function(xhr, status, error) {
			alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
			$('#overlay').hide();
		},
		complete: function(xhr, status) {
			$('#overlay').hide();
		}
	});
}


//

$("body").on("click", "#fdPrint", function() {
	console.log("fdPrint called showing print page ");
	$("#agentDiv").hide();
	$("#printAdvice").show();
});


//$("body").on("click", "#confirmDetailsSubmitPA", function() {
//	console.log("showing print otp page  ");
//	$("#printAdvice").hide();
//	$("#otpDetailsPA").show();
//});


// validate print account number and fd last digits 

function proceedToPrintOtp() {
	
		var statusToProceed = true;
		console.log("proceedToPrintOtp is called");

		
		var accountNumberPA = $("#accountNumberPA").val();
		var confirmaccountNumberPA = $("#confirmaccountNumberPA").val();
			var fdLastDigit = $("#fdLastDigit").val();

		

		var regexForAccountNumber = /^[0-9]{4}1[0-9]{10}$/ ;
			var regexForFD =    /^[0-9]{4}$/;
			
		var isValidAccountNumberPA = regexForAccountNumber.test(accountNumberPA);
		var isValidConfirmaccountNumberPA = regexForAccountNumber.test(confirmaccountNumberPA);
		var isValidFD = regexForFD.test(fdLastDigit);

		
		
		
		
		if (typeof($("#accountNumberPA").val()) === 'string'  &&  $("#accountNumberPA").val() === '' ) {
				statusToProceed = false;
				alertify.error("Please enter Saving Account number", msgTimeout);
			}
		
		
		if (typeof($("#confirmaccountNumberPA").val()) === 'string'  &&  $("#confirmaccountNumberPA").val() === '' &&  $("#accountNumberPA").val() !== '' ) {
				statusToProceed = false;
				alertify.error("Please re-enter Saving Account number", msgTimeout);
			}
		
		
		if (  $("#accountNumberPA").val() !== '' &&  $("#confirmaccountNumberPA").val() !== ''   &&  (!isValidAccountNumberPA || !isValidConfirmaccountNumberPA)) {
			statusToProceed = false;
			alertify.error("Please enter valid saving account number", msgTimeout);
		}

		if (  ($("#accountNumberPA").val() !== '' && $("#confirmaccountNumberPA").val() !== '' ) && accountNumberPA != confirmaccountNumberPA) {
			statusToProceed = false;
			alertify.error("Account number entered does not match", msgTimeout);
		}

		if (!$("#fdLastDigit").val()   ||  !isValidFD ) {
				statusToProceed = false;
			alertify.error("Invalid FD Number!", msgTimeout);

		}

		console.log("accountNumberPA: " + accountNumberPA);
		console.log("confirmaccountNumberPA: " + confirmaccountNumberPA);
		console.log("fdLastDigit: " + fdLastDigit);



		if (statusToProceed) {
				$("#printAdvice").hide();
			$("#otpDetailsPA").show();


	
		}

		
	}

//

//fd print advice flow  ends here 


// fd acknowledgement 

function fdCreationApiFd() {
	console.log("fdCreationApiFd is called");
	$('#overlay').show();


	var nominationData = JSON.parse(sessionStorage.getItem("accountNomination"));
	console.log("fdCreationApiFd nominationData::", nominationData);

	//
	//	nominationData["customerDeclarations"]="";
	//
	//	nominationData["consentCaptureDTTM"]=customerDeclarations["consentCaptureDTTM"];
	//	let csD= {
	//			
	//			"consentCaptureDTTM":customerDeclarations["consentCaptureDTTM"]
	//	};

	//	csD["consentCaptureDTTM"] = customerDeclarations["consentCaptureDTTM"];
	//add other fields 
	//	nominationData["customerDeclarations"] = csD ;

	//	console.log("fdCreationApiFd csD::" ,csD);


	//	var nominationData = sessionStorage.getItem("accountNomination");




//	console.log("fdCreationApiFd customerDeclarations:: ", customerDeclarations);
	var customerDeclarations = nominationData["customerDeclarations"][0][0];
	//	var consentCaptureDTTM =  JSON.stringify(customerDeclarations['consentCaptureDTTM']);
	var consentCaptureDTTM = customerDeclarations['consentCaptureDTTM'];

	var consentCapturedAt = JSON.stringify(customerDeclarations['consentCapturedAt']);
	var consentValue = JSON.stringify(customerDeclarations['consentValue']);
	var customerIpAddress = JSON.stringify(customerDeclarations['customerIpAddress']);
	var consentVersion = JSON.stringify(customerDeclarations['consentVersion']);


	console.log("fdCreationApiFd consentCaptureDTTM:: ", consentCaptureDTTM, consentCapturedAt, consentValue, customerIpAddress, consentVersion);


	var reasonForNomineeNotAvailable = nominationData['reasonForNomineeNotAvailable'];

	var existingNomineeSelected = nominationData['existingNomineeSelected'];
	var nomineeName = JSON.stringify(nominationData['nomineeName']);
	console.log("fdCreationApiFd nomineeName:: ", nomineeName);

	var guardianName = JSON.stringify(nominationData['guardianName']);
	var isNomineeMinor = nominationData['isNomineeMinor'];

	var nomineeAddress = JSON.stringify(nominationData['nomineeAddress']);
	var guardianAddress = JSON.stringify(nominationData['guardianAddress']);
	var nomineeDateOfBirth = nominationData['nomineeDateOfBirth'];
	var nomineeRelationshipWithAcHolder = nominationData['nomineeRelationshipWithAcHolder'];
    var guardianRelationshipWithNominee =  nominationData['guardianRelationshipWithNominee'];


	// fd details save
	$.ajax({
		url: fdCreateURL,
		type: 'POST',
		datatype: 'json',
		data: {
			"guardianRelationshipWithNominee":guardianRelationshipWithNominee,
			"reasonForNomineeNotAvailable": reasonForNomineeNotAvailable,
			"consentCaptureDTTM": consentCaptureDTTM,
			"consentCapturedAt": consentCapturedAt,
			"consentValue": consentValue,
			//			"customerIpAddress":customerIpAddress,
			"consentVersion": consentVersion,
			"isNomineeMinor": isNomineeMinor,
			"nomineeAddress": nomineeAddress,
			"guardianAddress": guardianAddress,
			"nomineeDateOfBirth": nomineeDateOfBirth,
			"nomineeRelationshipWithAcHolder": nomineeRelationshipWithAcHolder,
			"existingNomineeSelected": existingNomineeSelected,
			"nomineeName": nomineeName,
			"guardianName": guardianName,
			"agentId": sessionStorage.getItem('axisAgentId'),
			"terminalId": sessionStorage.getItem('axisTerminalId'),
			"fdApplicationReferenceId": sessionStorage.getItem("fdApplicationReferenceId")
		},
		success: function(result) {
			console.log("inside fdCreationApiFd result" + result.length);

			var response = JSON.parse(result);
			console.log("fdCreationApiFd", result);


			if (null != response.data && response.data.isProductAllocationInProgress) {

				alertify.success("CHECKING_FD_CREATION_RESULTS", msgTimeout);

				sessionStorage.setItem("fdCreationApiFdResponse", JSON.stringify(response));

				//call detailed enq and check if success else failed

				callDetailedEnqFD();
				//enq block 
				console.log("giving acknowledgement");
			} else if (response.code == "601") {

				alertify.success("FD CREATION FAILED", msgTimeout);

				$('#overlay').show();

			}
			//handle errors from fd creation
			 else if (response.code == "609") {
				 
				 response.errors.forEach(function(errorsArray) {
				        errorsArray.forEach(function(errorObj) {
				          console.log(errorObj.message);
				          alertify.success("FD CREATION FAILED "+errorObj.message, msgTimeout);
				        });
				      });
				    

					

					$('#overlay').show();

				} 
			
			
			else {
				console.log("fdCreationApiFd FAIL::", result);
				alertify.error("FD CREATION FAILED. Please try after some time!", msgTimeout);
				$('#overlay').show();
			}
			$('#overlay').hide();
		},
		error: function(xhr, status, error) {
			alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
			$('#overlay').hide();
		},
		complete: function(xhr, status) {}
	});
}

//callDetailedEnq  for fd creation
function callDetailedEnqFD() {
	console.log("callDetailedEnqFD is called");
	$('#overlay').show();
	// call api and verify response
	$.ajax({
		url: fdDetailedEnqURL,
		type: 'POST',
		datatype: 'json',
		data: {
			"agentId": sessionStorage.getItem('axisAgentId'),
			"terminalId": sessionStorage.getItem('axisTerminalId'),
			"fdApplicationReferenceId": sessionStorage.getItem("fdApplicationReferenceId")
		},
		success: function(result) {
			if (result.length) {
				var response = JSON.parse(result);
				console.log("response callDetailedEnqFD==>", response);


				if (response.statusCode == 200) {
					if (!response.data.isJourneyCompleted && response.data.stage == 'FD_ALLOC' 
						&&  response.data.subStage == 'FD_ALLOC_IN_PROGRESS' 
//						typeof(response.data.detailedStageData.FDCreationStageData.isFDCreated) === 'string' &&
//						typeof(response.data.detailedStageData.FDCreationStageData.isFDCompleted) === 'string' &&
//						response.data.detailedStageData.FDCreationStageData.isFDCreated == "" &&
						//(response.data.detailedStageData.FDCreationStageData.isFDCompleted == ""
							// ||	response.data.detailedStageData.FDCreationStageData.isFDCompleted == "WIP"
//						&& !response.data.detailedStageData.FDCreationStageData.FDCreationFailureReason 
						
						) {

						console.log('callDetailedEnqFD::inside delay ::', response);
						var delayTime = 8000; // Define the time to wait in milliseconds (e.g., 3000 milliseconds = 3 seconds)
						console.log('callDetailedEnqFD for ' + delayTime + ' milliseconds...');
						// Use setTimeout to execute a function after the specified delay
						setTimeout(function() {
							console.log('Waited for ' + delayTime + ' milliseconds. Continuing... caling callDetailedEnqCdd()');
							callDetailedEnqFD();
							// Place your code to execute after the delay here
							// This will run after the specified delay (e.g., 3 seconds)
						}, delayTime);
					} else if (
//						typeof(response.data.detailedStageData.FDCreationStageData.isFDCreated) === 'boolean' &&
//						typeof(response.data.detailedStageData.FDCreationStageData.isFDCompleted) === 'boolean' &&
//						response.data.detailedStageData.FDCreationStageData.isFDCompleted == false &&
//						response.data.detailedStageData.FDCreationStageData.isFDCreated == false
						
						response.data.isJourneyCompleted && response.data.subStage == 'FD_ALLOC_FAILURE'
						//test code 
//						 && response.data.detailedStageData.FDCreationStageData.FDCreationFailureReason != null
					) {
						$('#overlay').show();
						alertify.error("FD CREATION FAILED", response.data.detailedStageData.FDCreationStageData.FDCreationFailureReason, msgTimeout);
					
					} else if (typeof(response.data.detailedStageData.FDCreationStageData.isFDCreated) === 'boolean' &&
						typeof(response.data.detailedStageData.FDCreationStageData.isFDCompleted) === 'boolean' &&
						response.data.detailedStageData.FDCreationStageData.isFDCompleted == true &&
						response.data.detailedStageData.FDCreationStageData.isFDCreated == true) {
						console.log('fd created');

						alertify.success("FD_CREATION_SUCCESSFUL", msgTimeout);
						$('#overlay').hide();
						$("#fd_number").text(response.data.detailedStageData.FDCreationStageData.FDDetails.FDAccountedNo);
						$('#acknowledgement').show();

					}
				} else {
					$('#overlay').show();

					alertify.error("FD CREATION FAILED" + response.message, msgTimeout);
				}



			} else {
				$('#overlay').show();

				alert("Some Error has occurred. Please try after some time!");
			}
		},
		error: function(xhr, status, error) {

		},
		complete: function(xhr, status) {
			//			$('#overlay').hide();
		}
	});

}

//end fd enq 


//validate  otp 
function validateOtpApiFd() {
	//fx in 
	var proceedToNext = true;
	
//	let clickCount = 0; $('#resendOtp').click(() => console.log(++clickCount));


//	if(clickCount>3 ){
//		console.log("validateOtpApiFd otp limit reached");
//
//		proceedToNext = false;
//		alertify.error("OTP limit reached", msgTimeout);
//		
//	}
	
	if (!$("#otp").val()) {
		
		proceedToNext = false;
		alertify.error("Enter OTP sent on your registered mobile number", msgTimeout);
		
	}
	
	

	if (!sessionStorage.getItem("sendOtpApiFdResponse")) {
			
			proceedToNext = false;
			alertify.error("Error : Please Re-generate OTP", msgTimeout);
			
		}
	
	
	
	
		
	if(proceedToNext) {
	
	console.log("validateOtpApiFd is called");

	let challengeDataFd = JSON.parse(sessionStorage.getItem("sendOtpApiFdResponse"))["challenge"];
	var otp = $('#otp').val();

	//	let challengeDataFd= {
	//			"challengeContext":"FINAL-OTP-CONSENT",
	//				"challengeType": "OTP-SMS",
	//					"tokenReference": "20230608134035168621183589376777"
	//	}

	//fd details save 
	$.ajax({
		url: fdValidateOtpURL,
		type: 'POST',
		datatype: 'json',
		data: {
			"agentId": sessionStorage.getItem('axisAgentId'),
			"terminalId": sessionStorage.getItem('axisTerminalId'),
			"fdApplicationReferenceId": sessionStorage.getItem("fdApplicationReferenceId"),
			"challengeContext": challengeDataFd["challengeContext"],
			"challengeType": challengeDataFd["challengeType"],
			"tokenReference": challengeDataFd["tokenReference"],
			"tokenValue": otp
		},
		success: function(result) {
			var response = JSON.parse(result);
			console.log("validateOtpApiFd", result);

			if (response.statusCode == 200 && response.data.isSuccess) {

				alertify.success("OTP VALIDATION SUCCESSFULLY", msgTimeout);

				sessionStorage.setItem("validateOtpApiFdResponse", JSON.stringify(response.data));
				console.log("otp validation success");
				console.log("call fd creation");
				console.log("give acknowledgement");

				$('#otpDetails').hide();
				fdCreationApiFd()
			} 
			if(response.statusCode == 200 && !response.data.isSuccess)
				{
				alertify.success("Enter valid OTP sent on your registered mobile number", msgTimeout);
				console.log("otp incorrect");
				$('#otpDetails').show();
				
				}
			
			
			if(response.statusCode != 200 )
			{
				console.log("validateOtpApiFd FAIL::", result);
				alertify.error("OTP GENERATION FAILED. Please try after some time!", msgTimeout);
			}
			$('#overlay').hide();
		},
		error: function(xhr, status, error) {
			alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
			$('#overlay').hide();
		},
		complete: function(xhr, status) {
			$('#overlay').hide();
		}
	});
	
	
	
	}
	//fx outer 
}

//send otp 
function sendOtpApiFdx() {
	console.log("sendOtpApi is called");
	
//	var proceedToNext = true;
//
//	//otp count 
//	const maxClicks = 2;
//	const cooldownTime = 10 * 60 * 1000;
//	let clickCount = 0;//1//2//3
//	let lastClickTime = 0;
	
	
	 console.log('clickCount inside sendOtpApiFd ' , clickCount);

	
	 //otp button logic to handle the otp limit 
	
//	 $('#resendOtp').click(function() {
//		 
//		 clickCount++;
//		 console.log('clickCount  inside button click fx' , clickCount);
//
//		 if(clickCount >= maxClicks ){
//
//			 lastClickTime =  new Date().getTime();
//			 console.log('lastClickTime ' , lastClickTime);
//			 
//			 clickCount=0;
//			 console.log('clickCount  inside button click fx' , clickCount);
//
//			 alertify.error("OTP limit reached Please retry after 10mins", msgTimeout);
//			 $("#resendOtp").prop("disabled", true);
//			 proceedToNext = false;
//			 
//			 //set timeout and enable button after 10 mins 
//			 
//				setTimeout(function() {
//					console.log('waiting for 10 mins to enable the otp button again ');
//					 $("#resendOtp").prop("disabled", false);
//
//					 clickCount=0;
//					 console.log('clickCount  inside timeout log' , clickCount);
//					 
//					// Place your code to execute after the delay here
//					// This will run after the specified delay (e.g., 3 seconds)
//				}, cooldownTime);
//
//		 }
//	 });
	 

	 
	
	 
	 
	 
//	 if(currentTime - lastClickTime > cooldownTime){
//		 $("#resendOtp").prop("disabled", false);
//		 
//	 }
	
//    const maxClicks = 3;
//    const cooldownTime = 10 * 60 * 1000; // 10 minutes in milliseconds
//    let clickCount = 0;
//    let lastClickTime = 0;
//    let buttonInactive = false;

//    $('#resendOtp').click(function() {
//    	
//        const currentTime = new Date().getTime();
//
//        // Check if cooldown time has passed since the last click
//        if (currentTime - lastClickTime > cooldownTime) {
//          // Reset click count if cooldown time has passed
//          clickCount = 0;
//          buttonInactive = false;
//			$("#resendOtp").prop("disabled", false);
//
//
//        }
//        
//        // Check if the button is inactive
//        if (buttonInactive) {
//          console.log('Button inactive. Please wait for the cooldown period.');
//          return; // Stop further execution
//        }
//
//        // Check if click count is within the limit
//        if (clickCount < maxClicks) {
//          // Perform your action (e.g., resend OTP)
//          console.log('Resending OTP...');
//          clickCount++;
//          lastClickTime = currentTime;
//        } else {
//          // Button is inactive, notify user or perform action as needed
//    	  proceedToNext = false;
//			alertify.error("OTP limit reached Please retry after 10mins", msgTimeout);
//
//			
//			$("#resendOtp").prop("disabled", true);
//			
//          console.log('Button inactive. Please wait for the cooldown period.');
//          buttonInactive = true;
//        }
//        
//      });
	    
	    // otp time limit 
	
	
	if(proceedToNext){
	//fd details save 
	$.ajax({
		url: fdSendOtpURL,
		type: 'POST',
		datatype: 'json',
		data: {
			"agentId": sessionStorage.getItem('axisAgentId'),
			"terminalId": sessionStorage.getItem('axisTerminalId'),
			"fdApplicationReferenceId": sessionStorage.getItem("fdApplicationReferenceId")

		},
		success: function(result) {
			var response = JSON.parse(result);
			console.log("sendOtpApi", result);
			if (null != response && response.statusCode == 200 && response.data.isSuccess) {
				alertify.success("OTP SENT SUCCESSFULLY", msgTimeout);
				sessionStorage.setItem("sendOtpApiFdResponse", JSON.stringify(response.data));
			} else {
				console.log("sendOtpApiFd FAIL::", result);
				alertify.error("OTP GENERATION FAILED. Please try after some time!", msgTimeout);
			}
			$('#overlay').hide();
		},
		error: function(xhr, status, error) {
			alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
			$('#overlay').hide();
		},
		complete: function(xhr, status) {
			$('#overlay').hide();
		}
	});
	
	}
}


//confirm details submit show otp 
function confirmDetailsSubmit() {
	console.log("confirmDetailsSubmit is called");

	$("#confirmDetails").hide();
	$("#otpDetails").show();
}

// save nominee details in session
function saveNomineeDetails() {
	console.log("saveNomineeDetails is called");
	var radioValue = $('input[name="nominee"]:checked').val();
	var reasonForNomineeNotAvailable = "";
	var existingNomineeSelected = '';
	var isFreshNomineeRequired = sessionStorage.getItem("isFreshNomineeRequired");
	var proceedToNext = true;
	var isNomineeValidationRequired = false;
	if (radioValue == "Y") {
		
	} else if (radioValue == "N" ||  !$('input[name="nominee"]:checked').val()) {
		isNomineeValidationRequired = true;
	} else if (radioValue == "S") {
		var nomineeSkipReason = $("#nominee_skip_reason").val();
		if(nomineeSkipReason == ""){
			proceedToNext = false;
			alertify.error("Please select skip reason", msgTimeout);
		}
	}
	
//	if(sessionStorage.getItem("isFreshNomineeRequired") ==='Y'){
//		isNomineeValidationRequired = true;
//
//	}

	if(isNomineeValidationRequired){
		if ($("#nomineeDob").val().split('-')[2] < '1920') {
			proceedToNext = false;
			alertify.error("Nominee DOB should not be older than 1920", msgTimeout);
		}

		if (null === $("#nominee_title").val()) {
			proceedToNext = false;
			alertify.error("Nominee Title Can't Be Blank", msgTimeout);
		}

		if (!$("#nomineeNameF").val() || $("#nomineeNameF").val().length < 3) {
			proceedToNext = false;
			alertify.error("Nominee First Name Can't Be Blank. Min 3 Chars Required", msgTimeout);
		}

		if (!$("#nomineeNameL").val() || $("#nomineeNameL").val().length < 3) {
			proceedToNext = false;
			alertify.error("Nominee Last Name Can't Be Blank. Min 3 Chars", msgTimeout);
		}

		if (!$("#relationWithNominee").val()) {
			proceedToNext = false;
			alertify.error("Enter Relationship with Depositor", msgTimeout);
		}

		//line 1
		if (!$("#nomineeAddressl1").val() || $("#nomineeAddressl1").val().length > 40 ||
		
			//min length check 
			$("#nomineeAddressl1").val().length < 15
			 
			
		) {
			proceedToNext = false;
			alertify.error("Nominee Address Line 1 Should Have Min 15 Chars And Max 40 Chars", msgTimeout);
		}
		

		//line 2 
		if (  $("#nomineeAddressl2").val() !=''  &&  $("#nomineeAddressl2").val().length < 15) {
			proceedToNext = false;
			alertify.error("Nominee Address Line 2 Should Have Min 15 Chars", msgTimeout);
		}
		
		
		 if(  
				 $("#nomineeAddressl2").val().length >35  || 
				 $("#nomineeAddressl3").val().length >35
				 ){
			 proceedToNext = false;
			alertify.error("Nominee AddressLine 2 And 3 Should Have Max 35 Chars", msgTimeout);
		 }
		
		//line 3 
		if (  $("#nomineeAddressl3").val() !=''  &&  $("#nomineeAddressl3").val().length < 15) {
			proceedToNext = false;
			alertify.error("Nominee Address Line3 Should Have Min 15 Chars", msgTimeout);
		}
		

		//state 
		if ($("#selectNomineeState").val() === '0') {
			proceedToNext = false;
			alertify.error("Nominee State Can't Be Blank", msgTimeout);
		}
		
		//city 
		if ( $("#selectNomineeCity").val() === '0') {
				proceedToNext = false;
				alertify.error("Nominee City Can't Be Blank", msgTimeout);
			}
		
		
		//pin
		if ($("#selectNomineePincode").val() === '0') {
			proceedToNext = false;
			alertify.error("Nominee PinCode Can't Be Blank", msgTimeout);
		}
		//
		

		if ( Date.parse($("#nomineeDob").val().split('/').reverse().join('/')) > Date.parse($.datepicker.formatDate('dd/mm/yy', new Date()).split('/').reverse().join('/') )) {
			proceedToNext = false;
			alertify.error("DOB CAN'T BE A FUTURE DATE", msgTimeout);
		}
		if (!$("#nomineeDob").val()) {
			proceedToNext = false;
			alertify.error("Enter Nominee Date of Birth", msgTimeout);
		}
		
	}
	
	
	// if nominee is minor  validate details 
	if(!$('#isNomineeMinor').is(':checked')){
		
		 
		//validate guardina name 
		 if(!$("#relationship").val()){
			 
			 proceedToNext = false;
				alertify.error("Please Fill Guardian Relationship", msgTimeout);
		 }
		 
		 //separate  name validations 
		 if(null === $("#guardian_title").val() ){
			 
			 proceedToNext = false;
				alertify.error("Please Fill Guardian Title", msgTimeout);
		 }
		 
		 if(!$("#gurdianNameF").val()){
			 
			 proceedToNext = false;
				alertify.error("Please Fill Guardian First Name", msgTimeout);
		 }		 
		 if(!$("#gurdianNameL").val()){
			 
			 proceedToNext = false;
				alertify.error("Please Fill Guardian Last Name", msgTimeout);
		 }		 		 
		 
		 //
		 
		 //validate guardian address 
		 if(!$('#hide_nom_add').is(':checked')){
			 

			 //state
			 if( $("#selectGuardianState").val() ==='0'  
					
			 ){
				 
				 proceedToNext = false;
					alertify.error("Guardian State Can't Be Blank", msgTimeout);
			 }
			 
			 //city 
			 if(  
					 $("#selectGuardianCity").val()  ==='0' 
					
			 ){
				 
				 proceedToNext = false;
					alertify.error("Guardian City Can't Be Blank", msgTimeout);
			 }
			 //pin 
			 
			 if(  
					 $("#selectGuardianPincode").val()  ==='0' 
					
			 ){
				 
				 proceedToNext = false;
					alertify.error("Guardian Pincode Can't Be Blank", msgTimeout);
			 }
			 //
			 
			 if( 
					 $("#gurdianAddressl1").val().length <15  || 
					 $("#gurdianAddressl1").val().length >40  

					 ){
				 proceedToNext = false;
				alertify.error("Guardian AddressLine 1 Should Have Min 15 And Max 40 Chars", msgTimeout);
			 }
			 
			 
			 if(  
					 $("#gurdianAddressl2").val().length >35  || 
					 $("#gurdianAddressl3").val().length >35
					 ){
				 proceedToNext = false;
				alertify.error("Guardian AddressLine 2 And 3 Should Have Max 35 Chars", msgTimeout);
			 }
			 
			 if(   $("#gurdianAddressl3").val() !='' && $("#gurdianAddressl3").val().length < 15
					 ){
				 proceedToNext = false;
				alertify.error("Guardian AddressLine 3 Should Have Min 15 Chars", msgTimeout);
			 }
			 
			 if(   $("#gurdianAddressl2").val() !='' && $("#gurdianAddressl2").val().length < 15
						 ){
					 proceedToNext = false;
					alertify.error("Guardian AddressLine 2 Should Have Min 15 Chars", msgTimeout);
				 }
			 
			 
			 if( $("#gurdianAddressl1").val() !='' &&   $("#gurdianAddressl1").val().split(' ').filter((item) => item != '').length <3){
				 proceedToNext = false;
				alertify.error("Guardian AddressLine 1 must contain three independent and distinct string", msgTimeout);
			 }
			 
			 if( $("#gurdianAddressl2").val() !='' &&   $("#gurdianAddressl2").val().split(' ').filter((item) => item != '').length <3){
				 proceedToNext = false;
				alertify.error("Guardian AddressLine 2 must contain three independent and distinct string", msgTimeout);
			 }
			  
			 
			 
		 }

	
		
	}
	
	
	// hold if condition not satisfied 
	if (proceedToNext) {

		// fresh nominee not required
		// check the value and hide details not required
		if (isFreshNomineeRequired == 'N') {
			console.log("select existing nominee.. isFreshNomineeRequired is ", isFreshNomineeRequired);
			existingNomineeSelected = $('input[name="nominee"]:checked').val();

			//if skip existingNomineeSelected == N  and reason for skip from field
			if (existingNomineeSelected == 'S') {
				existingNomineeSelected = 'N';
				reasonForNomineeNotAvailable = $("#nominee_skip_reason").val();
			}
			console.log("saveNomineeDetails  select_existing_nominee::", existingNomineeSelected);
			console.log("saveNomineeDetails is called");
			commonNomineeDetails(existingNomineeSelected, reasonForNomineeNotAvailable);
		}

		if (isFreshNomineeRequired == 'Y') {
			//for testing added ''
			// fresh nominee is required and cant be skipped
			existingNomineeSelected = 'N';
			commonNomineeDetails(existingNomineeSelected, reasonForNomineeNotAvailable);
		}
		$("#nomineeDetails").hide();
		//set confirm details data to validate
		$("#confirmDetails").show();
	}
}


function commonNomineeDetails(existingNomineeSelected, reasonForNomineeNotAvailable) {

	console.log('insdie::commonNomineeDetails');

	let nomineeDetailsMain = {};
	let accountNomination = {};
	let nomineeName = {};
	let guardianName = {};
	//let isNomineeMinor = false;
	let nomineeAddress = {};
	let guardianAddress = {};

	// nominee details
	//	var [fistName , middleName, lastName ] = $("#nomineeName").val().split(" ");

	var relationWithNominee = $("#relationWithNominee").val();

	//var [fistNameGuardian , middleNameGuardian, lastNameGuardian ] = $("#gurdianFirstName").val().split(" ");
	let guardianRelationshipWithNominee;

	// guardian name
	let guardianFname = $("#gurdianNameF").val();
	let guardianMname = $("#gurdianNameM").val();
	let guardianLname = $("#gurdianNameL").val();
	
	

	 
	 
	guardianName["lastName"] = guardianLname;
	guardianName["firstName"] = guardianFname;
	guardianName["middleName"] = guardianMname;

	//nominee name 
	let nomFname = $("#nomineeNameF").val();
	let nomMname = $("#nomineeNameM").val();
	let nomLname = $("#nomineeNameL").val();


	nomineeName["title"] = $("#nominee_title").val();
	nomineeName["lastName"] = nomLname;
	nomineeName["firstName"] =  nomFname;
	nomineeName["middleName"] =  nomMname;

	//set confirm details data
	console.log('insdie::commonNomineeDetails changing customer_name');

//	document.getElementById('customer_name').textContent = 'Test';
//	document.getElementById('customer_name_ack').textContent = 'Test';
	
	document.getElementById('nominee_name_ack').textContent =  $("#nomineeNameF").val() +' '  + $("#nomineeNameM").val()+' ' +$("#nomineeNameL").val();

	document.getElementById('nominee_present').textContent = $('input[name="nominee"]:checked').val()  == 'Y'  || !$('input[name="nominee"]:checked').val() ? 'Yes' : 'NO';
	document.getElementById('is_guardian_present').textContent =$('#isNomineeMinor').is(':checked') ? 'NO' : 'YES';

	//

	//nominee address         	
	nomineeAddress["pinCode"] = $("#selectNomineePincode").val();
	nomineeAddress["cityCode"] = $("#selectNomineeCity").val();
	nomineeAddress["landmark"] = "landmark"; //optional
	nomineeAddress["stateCode"] = $("#selectNomineeState").val();
	nomineeAddress["addressType"] = "PERMANENT"; //permanent temp
	nomineeAddress["countryCode"] = "IN";
	nomineeAddress["addressLine1"] = $("#nomineeAddressl1").val();
	nomineeAddress["addressLine2"] = $("#nomineeAddressl2").val();
	nomineeAddress["addressLine3"] = $("#nomineeAddressl3").val();
	nomineeAddress["addressSubType"] = "SUB"; //optional field


	// check if nominee is minor or not hide irrelevant details if not minor
	var isNomineeMinor = !$('#isNomineeMinor').is(':checked'); 
	
	var isGuardianAddressSameAsNominee = $('#hide_nom_add').is(':checked');
	
	// if not check address is not same take both address
	if (isNomineeMinor) {
		// guardian address
		console.log("isNomineeMinor " + isNomineeMinor);


		guardianRelationshipWithNominee = $("#relationship").val();
		guardianName["title"] = $("#guardian_title").val();


		guardianAddress["landmark"] = "landmark";
		guardianAddress["addressType"] = "PERMANENT";
		guardianAddress["countryCode"] = "IN";
		guardianAddress["addressSubType"] = "SUB";
		
		//if address same as nominee 
		if(isGuardianAddressSameAsNominee){

			guardianAddress["stateCode"] =$("#selectNomineeState").val();
			guardianAddress["pinCode"] = $("#selectNomineePincode").val();
			guardianAddress["cityCode"] =$("#selectNomineeCity").val();
			guardianAddress["addressLine1"] =$("#nomineeAddressl1").val();
			guardianAddress["addressLine2"] = $("#nomineeAddressl2").val();
			guardianAddress["addressLine3"] = $("#nomineeAddressl3").val();
			
		}
		else{

			 
			 
			guardianAddress["stateCode"] =  $("#selectGuardianState").val();
			guardianAddress["pinCode"] = $("#selectGuardianPincode").val();
			guardianAddress["cityCode"] = $("#selectGuardianCity").val();
			guardianAddress["addressLine1"] = $("#gurdianAddressl1").val();
			guardianAddress["addressLine2"] = $("#gurdianAddressl2").val();
			guardianAddress["addressLine3"] = $("#gurdianAddressl3").val();
		}
		

		


	} else {
		console.log("isNomineeMinor not minor  isNomineeMinor:: " + isNomineeMinor);

		guardianAddress["pinCode"] = "";
		guardianAddress["cityCode"] = "";
		guardianAddress["landmark"] = "";
		guardianAddress["stateCode"] = "";
		guardianAddress["addressType"] = "";
		guardianAddress["countryCode"] = "";
		guardianAddress["addressLine1"] = "";
		guardianAddress["addressLine2"] = "";
		guardianAddress["addressLine3"] = "";
		guardianAddress["addressSubType"] = "";
	}

	// guardian details
	//			var relationship = $("#relationship").val();


	var nomineeDateOfBirth = $("#nomineeDob").val(); //.replace(/^(\d{2})-(\d{2})-(\d{4})$/, '$2/$1/$3')

	var nomineeRelationshipWithAcHolder = relationWithNominee;
	console.log("saveNomineeDetails nomineeRelationshipWithAcHolder::", nomineeRelationshipWithAcHolder);


	let customerDeclarations = [];

	let customerConsents = [];
	let customerConsent = {};
	customerConsent["consentValue"] = "Y";
	customerConsent["consentVersion"] = "1.0";
	customerConsent["consentCapturedAt"] = "SAHAJRL";
	customerConsent["consentCaptureDTTM"] = sessionStorage.getItem("consentCaptureDTTM");
	customerConsent["customerIpAddress"] = "127.0.0.1";

	customerConsents.push(customerConsent);
	customerDeclarations.push(customerConsents);

	accountNomination["reasonForNomineeNotAvailable"] = reasonForNomineeNotAvailable;

	accountNomination["existingNomineeSelected"] = existingNomineeSelected;
	accountNomination["nomineeName"] = nomineeName;
	accountNomination["guardianName"] = guardianName;
	accountNomination["isNomineeMinor"] = isNomineeMinor;
	accountNomination["nomineeAddress"] = nomineeAddress;
	accountNomination["guardianAddress"] = guardianAddress;
	accountNomination["nomineeDateOfBirth"] = nomineeDateOfBirth;
	accountNomination["guardianRelationshipWithNominee"] = guardianRelationshipWithNominee;
	accountNomination["nomineeRelationshipWithAcHolder"] = nomineeRelationshipWithAcHolder;

	accountNomination["customerDeclarations"] = customerDeclarations;
	console.log("saveNomineeDetails accountNomination::", accountNomination);
	sessionStorage.setItem("accountNomination", JSON.stringify(accountNomination));

	// display the preview 
}

$(document).on("click", "input[name='nominee']", function(event) {
	var radioValue = $('input[name="nominee"]:checked').val();
	if (radioValue == "Y") {
		$("#nominee_all").hide();
		$("#nominee_skip_reason_col").hide();
		$("#nominee_skip_reason_col").attr("disabled", true);
	} else if (radioValue == "N") {
		$("#nominee_all").show();
		$("#nominee_skip_reason_col").hide();
		$("#nominee_skip_reason_col").attr("disabled", true);
	} else if (radioValue == "S") {
		$("#nominee_all").hide();
		$("#nominee_skip_reason_col").show();
		$("#nominee_skip_reason_col").attr("disabled", false);
	}
});



// hide nominne address in case nominee and guardian address are same
$("body").on("click", "#isNomineeMinor", function() {
	console.log("guardian_address_grid hidden");
	$("#guardian_address_grid").toggle();
	$("#guardian_address_grid2").toggle();
	$("#guardian_address_grid3").toggle();

});


//hide nominne address in case nominee and guardian address are same
$("body").on("click", "#hide_nom_add", function() {
	console.log("guardian_address_grid hidden");
	$("#guardian_address_grid").toggle();


});


//common for guradian and nominee
function loadStates() {
	$.ajax({
		url: loadStatesURL,
		type: 'POST',
		datatype: 'json',
		data: {
			"test": ""
		},
		success: function(result) {
			response = JSON.parse(result);
			//console.log('response==>', response);
			var statesResponse = JSON.parse(response.statesResponse);
			var resObject = statesResponse.resObject;
			//console.log('status==>', statesResponse.status);

			if (statesResponse.status == "true") {
				for (var i = 0; i < resObject.length; i++) {
					var state = resObject[i];
//					console.log('state ==>', state);

					$('#selectNomineeState').append($("<option></option>").attr("value", state[1]).text(state[0] + "-" + state[1]));
					$('#selectGuardianState').append($("<option></option>").attr("value", state[1]).text(state[0] + "-" + state[1]));



				}
			}
		},
		error: function(xhr, status, error) {
			alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
		},
		complete: function(xhr, status) {
			$('#overlay').hide();
		}
	});
}


function onStateChangeN() {
	console.log("onStateChangeN==>");
	var selectedState = $("#selectNomineeState").val();

	//console.log("selectedState==>", selectedState);
	$('#selectNomineeCity').children('option:not(:first)').remove();
	$('#selectNomineePincode').children('option:not(:first)').remove();

	$.ajax({
		url: onStateChangeURL,
		type: 'POST',
		datatype: 'json',
		data: {
			"stateCode": selectedState
		},
		success: function(result) {
			//console.log('response from onComStateChange:: ', result);
			response = JSON.parse(result);
			var citiesResponse = JSON.parse(response.citiesResponse);
			var resObject = citiesResponse.resObject;
			//console.log('status==>', citiesResponse.status);

			if (citiesResponse.status == "true") {
				for (var i = 0; i < resObject.length; i++) {
					var city = resObject[i];
//					console.log('city ==>', city);

					$('#selectNomineeCity').append($("<option></option>").attr("value", city[1]).text(city[0] + "-" + city[1]));

				}
			}
		},
		error: function(xhr, status, error) {
			alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
		},
		complete: function(xhr, status) {
			//			$('#overlay').hide();
		}
	});
}


//city drop for guardian
function onStateChangeG() {
	console.log("onStateChangeG==>");
	var selectedState = $("#selectGuardianState").val();

	//console.log("selectedState==>", selectedState);
	$('#selectGuardianCity').children('option:not(:first)').remove();
	$('#selectGuardianPincode').children('option:not(:first)').remove();

	$.ajax({
		url: onStateChangeURL,
		type: 'POST',
		datatype: 'json',
		data: {
			"stateCode": selectedState
		},
		success: function(result) {
			//console.log('response from onComStateChange:: ', result);
			response = JSON.parse(result);
			var citiesResponse = JSON.parse(response.citiesResponse);
			var resObject = citiesResponse.resObject;
			//console.log('status==>', citiesResponse.status);

			if (citiesResponse.status == "true") {
				for (var i = 0; i < resObject.length; i++) {
					var city = resObject[i];
//					console.log('city ==>', city);

					$('#selectGuardianCity').append($("<option></option>").attr("value", city[1]).text(city[0] + "-" + city[1]));

				}
			}
		},
		error: function(xhr, status, error) {
			alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
		},
		complete: function(xhr, status) {
			//			$('#overlay').hide();
		}
	});
}






function onCityChangeN() {

	var selectedCity = $("#selectNomineeCity").val();

	//console.log("selectedCity==>", selectedCity);
	$('#selectNomineePincode').children('option:not(:first)').remove();

	$.ajax({
		url: onCityChangeURL,
		type: 'POST',
		datatype: 'json',
		data: {
			"cityCode": selectedCity
		},
		success: function(result) {
			//console.log('response from load state:: ', result);
			response = JSON.parse(result);
			//console.log('response from onComCityChange api ::response ==> ', response);
			var pinCodesResponse = JSON.parse(response.pinCodesResponse);
			var resObject = pinCodesResponse.resObject;
			//console.log('pinCodesResponse :: status==>', pinCodesResponse.status);

			if (pinCodesResponse.status == "true") {
				for (var i = 0; i < resObject.length; i++) {
					console.log('onCityChange');
					var pinCode = resObject[i].pinCode;
					console.log('pinCode ==>', resObject[i]);
					$('#selectNomineePincode').append($("<option></option>").attr("value", pinCode).text(pinCode));

				}
			}
		},
		error: function(xhr, status, error) {
			alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
		},
		complete: function(xhr, status) {
			//			$('#overlay').hide();
		}
	});
}


function onCityChangeG() {

	var selectedCity = $("#selectGuardianCity").val();

	//console.log("selectedCity==>", selectedCity);
	$('#selectGuardianPincode').children('option:not(:first)').remove();

	$.ajax({
		url: onCityChangeURL,
		type: 'POST',
		datatype: 'json',
		data: {
			"cityCode": selectedCity
		},
		success: function(result) {
			//console.log('response from load state:: ', result);
			response = JSON.parse(result);
			//console.log('response from onComCityChange api ::response ==> ', response);
			var pinCodesResponse = JSON.parse(response.pinCodesResponse);
			var resObject = pinCodesResponse.resObject;
			//console.log('pinCodesResponse :: status==>', pinCodesResponse.status);

			if (pinCodesResponse.status == "true") {
				for (var i = 0; i < resObject.length; i++) {
					console.log('onCityChange');
					var pinCode = resObject[i].pinCode;
					console.log('pinCode ==>', resObject[i]);
					$('#selectGuardianPincode').append($("<option></option>").attr("value", pinCode).text(pinCode));

				}
			}
		},
		error: function(xhr, status, error) {
			alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
		},
		complete: function(xhr, status) {
			//			$('#overlay').hide();
		}
	});
}



//call detailed enq simple 
function callDetailedEnq2() {
	console.log("callDetailedEnq2 is called");
	//	var response;
	// call api and verify response
	$.ajax({
		url: fdDetailedEnqURL,
		type: 'POST',
		datatype: 'json',
		data: {
			"agentId": sessionStorage.getItem('axisAgentId'),
			"terminalId": sessionStorage.getItem('axisTerminalId'),
			"fdApplicationReferenceId": sessionStorage.getItem("fdApplicationReferenceId")
		},
		success: function(result) {
			if (result.length) {
				console.log("response fdDetailedEnqURL2==> result", result);

				var response = JSON.parse(result);
				console.log("response fdDetailedEnqURL2==> success response", response);
				sessionStorage.setItem("FD_ENQ", JSON.stringify(response));


			} else {
				alert("Some Error has occurred. Please try after some time!");
			}
		},
		error: function(xhr, status, error) {

			console.log("response fdDetailedEnqURL2==> api error ", error);

		},
		complete: function(xhr, status) {
			//			$('#overlay').hide();
		}
	});

	//	return response;

}




//end 



//cdd start  fdDetailedCddURL
function fdDetailedCdd() {
	$('#overlay').show();
	console.log("fdDetailedCdd is called");
	// call api and verify response
	$.ajax({
		url: fdInitCddURL,
		type: 'POST',
		datatype: 'json',
		data: {
			"agentId": sessionStorage.getItem('axisAgentId'),
			"terminalId": sessionStorage.getItem('axisTerminalId'),
			"fdApplicationReferenceId": sessionStorage.getItem("fdApplicationReferenceId")
		},
		success: function(result) {
			console.log("response fdDetailedCdd==> result", result);

			if (result.length) {

				var response = JSON.parse(result);
				console.log("response fdDetailedCdd==> success response", response);
				if (response.statusCode == 200 && response.data.isCDDInitiated) {

					alertify.success("Initiating CDD Process (Background Checks)", msgTimeout);
					console.log("fdDetailedCdd response ", response);


//					$('#overlay').hide();
					callDetailedEnqCdd();

				}
				
				if(response.statusCode == '402' ){
					alertify.error("CDD FAILED" + response.errors[0].message, msgTimeout);

					
				}



			} else {
				alert("Some Error has occurred. Please try after some time!");
			}
		},
		error: function(xhr, status, error) {

			console.log("response fdDetailedCdd==> api error ", error);

		},
		complete: function(xhr, status) {
			//			$('#overlay').hide();
		}
	});


}


//cdd end 


//detailed enq for cdd 
//callDetailedEnq  for kyc
function callDetailedEnqCdd() {
	console.log("callDetailedEnq is called");
	$('#overlay').show();
	// call api and verify response
	$.ajax({
		url: fdDetailedEnqURL,
		type: 'POST',
		datatype: 'json',
		data: {
			"agentId": sessionStorage.getItem('axisAgentId'),
			"terminalId": sessionStorage.getItem('axisTerminalId'),
			"fdApplicationReferenceId": sessionStorage.getItem("fdApplicationReferenceId")
		},
		success: function(result) {
			if (result.length) {
				var response = JSON.parse(result);
				console.log("response fdDetailedEnqURL==>", response);


				if (response.statusCode == 200) {

					console.log("callDetailedEnqCdd  S::", response);


					if (!response.data.isJourneyCompleted && response.data.stage == 'CDD' &&
						response.data.detailedStageData.cddStageData.isCDDCompleted == "" &&
						response.data.detailedStageData.cddStageData.isCDDSuccessful == "" &&
						response.data.detailedStageData.cddStageData.cddFailureReason == "") {


						console.log('callDetailedEnqCdd::inside delay ::', response);

						alertify.success("Waiting For CDD Results", msgTimeout);

						var delayTime = 8000; // Define the time to wait in milliseconds (e.g., 3000 milliseconds = 3 seconds)

						console.log('callDetailedEnqCdd for ' + delayTime + ' milliseconds...');

						// Use setTimeout to execute a function after the specified delay
						setTimeout(function() {
							console.log('Waited for ' + delayTime + ' milliseconds. Continuing... caling callDetailedEnqCdd()');
							callDetailedEnqCdd();
							// Place your code to execute after the delay here
							// This will run after the specified delay (e.g., 3 seconds)
						}, delayTime);



					}


					if (response.data.detailedStageData.cddStageData.cddFailureReason == "TECH_FAILURE") {
						alertify.error("CDD Process FAILED Please Re-Try !.." + response.data.detailedStageData.cddStageData.cddFailureReason, msgTimeout);
						$('#kycSuccess').show();
					}

					if (response.data.detailedStageData.cddStageData.cddFailureReason.length) {
						$('#kycSuccess').hide();

						$('#overlay').show();

						console.log("fdDetailedEnqURL  inside false false isCDDCompleted::" + response.data.detailedStageData.cddStageData.isCDDCompleted);
						console.log("fdDetailedEnqURL   FAILED::" + response.data.detailedStageData.cddStageData.isCDDSuccessful);

						alertify.error("CDD PROCESS FAILED" + response.data.detailedStageData.cddStageData.cddFailureReason, msgTimeout);

					}


					$("#kycSuccess").hide();
					$("#nomineeDetails").show();
					$("#nominee_all").show();
					$(".nom_req").hide();

					//set customer name  customer_name
					$("#customer_name").text(response.data.customerName);
					$("#customer_name_ack").text(response.data.customerName);

					
			
					
					loadStates();
					sessionStorage.setItem("fdDetailedEnqResponse", JSON.stringify(response));

					console.log("fdDetailedEnqURL  verification done... showing nominee details.");
					let fdEnqData = JSON.parse(sessionStorage.getItem("fdDetailedEnqResponse"))["data"];
					let isFreshNomineeRequired = fdEnqData["isFreshNomineeRequired"];
					sessionStorage.setItem("isFreshNomineeRequired", isFreshNomineeRequired);

					if (isFreshNomineeRequired == 'Y') {
						// hide if Y , fresh nominee required and can not be
						// skipped
						$(".nom_req").hide();

					}
					else if (isFreshNomineeRequired == 'N') {
						// hide if Y , fresh nominee required and can not be
						// skipped
						$(".nom_req").show();

					}
					

					$('#overlay').hide();
				} else {
					$('#overlay').show();
					alertify.error("CDD_ENQ_FAILED" + response.message, msgTimeout);
				}
			} else {
				$('#overlay').show();
				alert("Some Error has occurred. Please try after some time!");
			}
		},
		error: function(xhr, status, error) {
		},
		complete: function(xhr, status) {
		}
	});

}

// callDetailedEnq  for kyc
function callDetailedEnq() {
	console.log("callDetailedEnq is called");
	$('#overlay').show();
	// call api and verify response
	$.ajax({
		url: fdDetailedEnqURL,
		type: 'POST',
		datatype: 'json',
		data: {
			"agentId": sessionStorage.getItem('axisAgentId'),
			"terminalId": sessionStorage.getItem('axisTerminalId'),
			"fdApplicationReferenceId": sessionStorage.getItem("fdApplicationReferenceId")
		},
		success: function(result) {
			if (result.length) {
				var response = JSON.parse(result);
				console.log("response fdDetailedEnqURL==>", response);
				if (response.statusCode == 200) {
					if (!response.data.isJourneyCompleted && response.data.subStage == 'KYC_INIT_SUCCESS' &&
						response.data.nextStage == 'KYC' && response.data.detailedStageData.consentStageData.isEligible == 'N'
					) {
						console.log('response::inside delay ::', response);
						var delayTime = 8000; // Define the time to wait in milliseconds (e.g., 3000 milliseconds = 3 seconds)
						console.log('Waiting for ' + delayTime + ' milliseconds...');
						// Use setTimeout to execute a function after the specified delay
						setTimeout(function() {
							console.log('Waited for ' + delayTime + ' milliseconds. Continuing... caling callDetailedEnq()');
							callDetailedEnq();
							// Place your code to execute after the delay here
							// This will run after the specified delay (e.g., 3 seconds)
						}, delayTime);
					}
					if (response.data.subStage == 'KYC_COMPLETED_SUCCESS' &&
						response.data.detailedStageData.consentStageData.isEligible == 'Y') {
						alertify.success("KYC SUCCESSFULL", msgTimeout);
						
						console.log('KYC SUCCESSFULL');

						$('#fingerprintdevice').hide();
						$('#kycSuccess').show();
						$('#overlay').hide();
					}

					if (!response.data.isJourneyCompleted &&
						response.data.detailedStageData.consentStageData.isEligible == 'N' &&
						response.data.detailedStageData.consentStageData.consentfailureReason.length) {
						$('#overlay').show();
						console.log("fdDetailedEnqURL   inside : 1st else ");
						alertify.error("KYC_FAILED " + response.data.detailedStageData.consentStageData.consentfailureReason, msgTimeout);
						alertify.error("PLEASE RETRY KYC", msgTimeout);
						
						//re try kyc 
						$('#overlay').hide();
					}

				} else {
					$('#overlay').show();

					alertify.error("KYC_FAILED " + response.message, msgTimeout);
				}
			} else {
				$('#overlay').show();

				alert("Some Error has occurred. Please try after some time!");
			}
		},
		error: function(xhr, status, error) {

		},
		complete: function(xhr, status) {
			//			$('#overlay').hide();
		}
	});

}




// initiate KYC
function initiateKycFd() {
	console.log("initiateKycFd is called");
	//	$('#overlay').show();
	var isMocked = sessionStorage.getItem("mock")

	// flow to check the kyc initiate result
	// continue if true else journey ends

	//uncomment after testing 
	if (sessionStorage.getItem("fingureData") == null && isMocked != 'Y') {
		alertify.error("finger print is not captured", msgTimeout);
		return;
	}

	// create KYC_Initiate request data strucutre
	// mainData {
	// ref
	// kyc data{ kyc type, biometricKYCData }
	// metadata
	//
	// }
	let ekyc = {};
	let kycData = {};
	kycData["kycType"] = sessionStorage.getItem("consentType");
	//	kycData["kycType"] = "AADHAAR_EKYC_BIOMETRIC_AUTH";
	//test code remove after uat 
	let fingureData;
	var uid = $("#adhar_no").val();

	if (isMocked == 'Y') {
		//add time for mock flow 
		sessionStorage.setItem("consentCaptureDTTM", Date.now());
		var fpmock = {
			"biometricKYCData": {
				"uId": uid,
				"dpId": "MANTRA.MSIPL",
				"rdsId": "MANTRA.WIN.001",
				"rdsVer": "1.0.8",
				"dc": "0356fcca-a0f7-4c72-9672-0be49ed8d0b7",
				"mi": "MFS100",
				"mc": "MIIEGDCCAwCgAwIBAgIEAyi3QDANBgkqhkiG9w0BAQsFADCB6jEqMCgGA1UEAxMhRFMgTUFOVFJBIFNPRlRFQ0ggSU5ESUEgUFZUIExURCAzMVUwUwYDVQQzE0xCLTIwMyBTaGFwYXRoIEhleGEgT3Bwb3NpdGUgR3VqYXJhdCBIaWdoIENvdXJ0IFMuRyBIaWdod2F5IEFobWVkYWJhZCAtMzgwMDYwMRIwEAYDVQQJEwlBSE1FREFCQUQxEDAOBgNVBAgTB0dVSkFSQVQxCzAJBgNVBAsTAklUMSUwIwYDVQQKExxNQU5UUkEgU09GVEVDSCBJTkRJQSBQVlQgTFREMQswCQYDVQQGEwJJTjAeFw0yMzEwMjcwNjA4MjFaFw0yMzExMjAwNTQxNTNaMIGwMSUwIwYDVQQDExxNYW50cmEgU29mdGVjaCBJbmRpYSBQdnQgTHRkMR4wHAYDVQQLExVCaW9tZXRyaWMgTWFudWZhY3R1cmUxDjAMBgNVBAoTBU1TSVBMMRIwEAYDVQQHEwlBSE1FREFCQUQxEDAOBgNVBAgTB0dVSkFSQVQxCzAJBgNVBAYTAklOMSQwIgYJKoZIhvcNAQkBFhVzdXBwb3J0QG1hbnRyYXRlYy5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCtdTlYZ2ddejxmvzjgvbjUAu6jxPqr8onm696qbgx3g/XedWKE3Zu7Ffq7s0PTHwfyHv16uTYfZNj0lx9z5+vgRLhLxC+Yh982/HO8ZtTJWvjWgvrWpe7DqJTSyS2YVLhtm2g8IaQo0YCQ7vrfsrUFMk35Tmxq8VYjsZPKYMgR7d899r+UyNvYfoMh+E7Yh1zJ+p+HG2SDbidy9xIBfMix6IToU+7rkQxjA2C7qMwyxIUZ6qo7FR+lHxy4H8Y/IJmq8PNvhAxD8hMHVBWU3QaxAf3FO9lvP6A9SXYVQ9sR/DMJaHG6z9O5SA1YYaxKcJDUyQmr3Mi+7MeAaIWVp78DAgMBAAEwDQYJKoZIhvcNAQELBQADggEBAHyyjFxrF8v+NM0vwm4F5M4bxlNjmoLY8akpW7hNJq+aXaCSNC/rz5PgN9S3jnY7I1PbwO41kd5b8bcXpsJ2vgbSwWSK/e1fOJbEIxy0aLn5ZJwJYsjUZDt7+g8vab+wR9ZKK+3HjHmfyVxiMI5DKL2hHyO6t6DhT5V9iw6TAMEcVKdjtyhw+aWuuz5/hj5emoi9u9VyiqvjQLiXwAxbNPMrXm+wDl7pSWB6E2jYtsAT68RmDqfrg9+nNMv00kCSut9cNH6azJaa2uC1oXgONzv1FwJa769HIFKGxft7pV5eHNFBotH8sCOnLE0o2iI7VVDFmPWiHJIwkrdkmcTZTKY=",
				"Skey": "Cx37ZiljSyTYQ2cMVKuNvFeC29MXjWp7Gh+lc3Ry0XzxJnBab5Wv4FWcKDNs9uSTaBtmhdH6zZtTFNxFL4hqBa1vGlA/skAEa4v6m9CSl/KpIO1r+YBavx9inzdeJo7zdWFc4l2n/XcjE0nm9a5+0JWyI9YlSU6b/FU+HdVUTgqbea7olgOrcE9d1ckkDcweC0xdyrQygwzr+UVw3vXh/rsAdNELRKrwpqaazKty2o1GKjqap/Vsh0YYM/E4EgMJN3XXWcLjG/QQvXOH9GXc7YmHfpdLeBggqGZlhrKvTCs5nrk33AQkFrw2M0AGcNFLYgL/IlGJKO49kA5kQUw6TA==",
				"ci": "20250929",
				"hMac": "B4W0Lmwyo27CvgzuqXeuqXzPzhYy+UgV+jMB+QkArCyT60UrninaRWKriTULZBtk",
				"encryptedSessionKey": "",
				"encryptedPidBlock": "",
				"ts": "2023-11-1T15:54:52+5:30"
			}
		}
		fingureData = fpmock["biometricKYCData"];


	} else {

		fingureData = JSON.parse(sessionStorage.getItem("fingureData"))["biometricKYCData"];
	}



	//

	//uncomment after testing 
	//	

	console.log("inside initiateKycFd() fingureData", fingureData);

	let biometricKYCData = {};


	biometricKYCData["uId"] = fingureData["uId"];


	// if AADHAAR_EKYC_BIOMETRIC send this block  else if AADHAAR_EKYC_BIOMETRIC_AUTH send blank

	if (sessionStorage.getItem("consentType") == "AADHAAR_EKYC_BIOMETRIC") {

		biometricKYCData["encryptedPidBlock"] = fingureData["encryptedPidBlock"];
	} else if (sessionStorage.getItem("consentType") == "AADHAAR_EKYC_BIOMETRIC_AUTH") {
		biometricKYCData["encryptedPidBlock"] = "";

	}




	biometricKYCData["encryptedSessionKey"] = "";

	biometricKYCData["hMac"] = fingureData["hMac"];

	biometricKYCData["ts"] = fingureData["ts"];

	biometricKYCData["ci"] = fingureData["ci"];
	biometricKYCData["dc"] = fingureData["dc"];

	biometricKYCData["mc"] = fingureData["mc"];

	biometricKYCData["Skey"] = fingureData["Skey"];

	biometricKYCData["dpId"] = fingureData["dpId"];

	biometricKYCData["rdsId"] = fingureData["rdsId"];

	biometricKYCData["rdsVer"] = fingureData["rdsVer"];
	biometricKYCData["mi"] = fingureData["mi"];
	biometricKYCData["isFir"] = 2;

	console.log("inside initiateKycFd() biometricKYCData", biometricKYCData);


	let kycConsent = {};

	kycConsent["consentValue"] = "Y";
	kycConsent["consentVersion"] = "1.0";
	kycConsent["consentCapturedAt"] = "SAHAJRL";
	kycConsent["consentCaptureDTTM"] = sessionStorage.getItem("consentCaptureDTTM");
	kycConsent["customerIpAddress"] = "127.0.0.1";

	let kycConsentsList = []
	kycConsentsList.push(kycConsent);

	biometricKYCData["kycConsentsList"] = kycConsentsList;

	kycData["biometricKYCData"] = biometricKYCData;


	console.log("inside initiateKycFd()  kycConsentsList", kycConsentsList);




	// ekyc["applicationReferenceId"] =
	// JSON.parse(sessionStorage.getItem("product_eligibility_payload"))["referenceId"];

	ekyc["applicationReferenceId"] = sessionStorage.getItem("fdApplicationReferenceId");

	ekyc["kycData"] = kycData;
	ekyc["metadata"] = JSON.parse(sessionStorage.getItem("metadata"));
	ekyc["consentCaptureDTTM"] = new Date().getTime();
	sessionStorage.setItem("bio_kyc_payload", JSON.stringify(ekyc));

	console.log("ekyc finalData", ekyc);

	let final_payload = {};
	final_payload["payload"] = JSON.stringify(ekyc);

	console.log("final_payload", final_payload);

	sessionStorage.removeItem("fingureData");



	// call api and verify response

	$.ajax({
		async: false,
		url: fdInitiateKycURL,
		type: 'POST',
		datatype: 'json',
		data: final_payload,
		success: function(result) {


			if (result.length) {
				response = JSON.parse(result);
				console.log("response kyc==>", response);
				if (response.statusCode == 200) {
					if (response.data.isConsentInitiated) {
						console.log("checkpoint in kyc fd");

						//						 callDetailedEnq2();
						//						 
						//						 let fdEnq =  JSON.parse(sessionStorage.getItem("FD_ENQ"));

						//						console.log("initiateKycFd test enq return",fdEnq);

						alertify.success("KYC  initiated Successfully...", msgTimeout);
						sessionStorage.setItem("KYC_RES", JSON.stringify(result));
						data = response.data;

						let applicationReferenceId = data.applicationReferenceId;
						console.log("fdInitiateKycURL in applicationReferenceId", applicationReferenceId);

						console.log("checking kyc results.....");

						// add method for calling detailed enq along with this



						$('#overlay').show();
						alertify.success("Checking Kyc Results Please Wait..", msgTimeout);

						callDetailedEnq();


						console.log("KYC done");



						//						$('#overlay').hide();
						// if(spaceCount == 0){
						// $("#journeyBlockForUSer").show();
						// $("#reasonForBlock").text('Your UIDAI data does not
						// match our policy. You cannot continue your journey.
						// If you wish to continue another journey, please click
						// the button below.');
						// $("#figurePrintDiv").hide();
						// }else if(userAge < 18){
						// $("#journeyBlockForUSer").show();
						// $("#reasonForBlock").text('Sorry! You need to be at
						// least 18 years old to apply for a Current Account
						// with us.');
						// $("#figurePrintDiv").hide();
						//							
						// }

					} else {
						alertify.error("KYC_FAILED", msgTimeout);
						
						console.log("KYC_FAILED::response", response);

						$('#overlay').show();


					}

				} else {
					$('#overlay').show();

					alertify.error("KYC_FAILED " + response.errors[0].message, msgTimeout);
					//					callDetailedEnq();
				}
			} else {
				console.log("inside Some Error block", result);


				alert("Some Error has occurred. Please try after some time!")
			}
		},
		error: function(xhr, status, error) {

			console.log("inside error kyc block", error);

		},
		complete: function(xhr, status) {
			//			$('#overlay').hide();
		}
	});




}



//method to capture finger print
$("body").on("click", "#mockCapture", function() {
	console.log("mock method called");

	sessionStorage.setItem("mock", "Y");



});




// method to capture finger print
$("body").on("click", "#fingurCapture", function() {
	console.log("fnigerprint method called");

	/*
	 * captureFromMantraStartek('https://127.0.0.1:11100/capture',
	 * 'https://127.0.0.1:11100', 'https://127.0.0.1:11100',
	 * 'https://127.0.0.1:11100');
	 */
	captureFromMantraStartek('https://127.0.0.1:11100/capture', 'https://127.0.0.1:11100', 'https://device.sahaj.co.in:11100/rd/capture', 'https://127.0.0.1:11100/rd/capture', 'https://localhost:11100');
});



function captureFromMantraStartek(redirectUrl, url2Option, url3Option, url4Option, url5Option) {
	var url = null;
	if (redirectUrl !== null) {
		url = redirectUrl;
	} else if (redirectUrl === null && url2Option !== null) {
		url = url2Option;
	} else if (redirectUrl === null && url2Option === null && url3Option !== null) {
		url = url3Option;
	} else if (redirectUrl === null && url2Option === null && url3Option !== null && url4Option !== null) {
		url = url4Option;
	} else {
		url = url5Option;
	}
	if (url == 'https://127.0.0.1:11100') {
		var PIDOPTS = `<PidOptions ver=\"1.0\"><Opts fCount=\"1\" fType=\"2\" iCount=\"0\" iType=\"\" pCount=\"0\" pType=\"\" format=\"0\" pidVer=\"2.0\" timeout=\"10000\" otp=\"\" wadh=\"E0jzJ/P8UopUHAieZn8CKqS4WPMi5ZSYXgfnlfkWjrc=\" posh=\"\" env=\"PP\"/></PidOptions>`;
	} else if (url == 'https://127.0.0.1:11100/capture') {
		var PIDOPTS = `<PidOptions ver=\"1.0\"><Opts fCount=\"1\" fType=\"2\" iCount=\"0\" iType=\"\" pCount=\"0\" pType=\"\" format=\"0\" pidVer=\"2.0\" timeout=\"10000\" otp=\"\" wadh=\"E0jzJ/P8UopUHAieZn8CKqS4WPMi5ZSYXgfnlfkWjrc=\" posh=\"\"/></PidOptions>`;
	} else {
		var PIDOPTS = `<PidOptions ver=\"1.0\"><Opts fCount=\"1\" fType=\"2\" iCount=\"0\" iType=\"\" pCount=\"0\" pType=\"\" format=\"0\" pidVer=\"2.0\" timeout=\"10000\" otp=\"\" wadh=\"E0jzJ/P8UopUHAieZn8CKqS4WPMi5ZSYXgfnlfkWjrc=\" posh=\"\" env=\"PP\"/></PidOptions>`;
	}
	var xhr = new XMLHttpRequest();
	xhr.open('CAPTURE', url, true);
	xhr.setRequestHeader("Content-Type", "text/xml");
	xhr.onload = function(e) {
			console.log(xhr.status);
			if (xhr.status === 200) {
				console.log('Success xhr :', xhr);
				piddata = xhr.responseText;
				console.log('result :: ' + piddata);

				var pidxml = $.parseXML(piddata),
					$pidxml = $(pidxml),
					$errCode = $pidxml.find('Resp').attr('errCode');

				var data;
				if ($errCode != 0) {
					alert($pidxml.find('Resp').attr('errInfo'));
				} else {

					xmlQQ = xhr.responseXML;
					console.log('result xhr.responseXML :: ' + xmlQQ);
					data = xmlToJson(xhr.responseXML);
					console.log('result :: ' + data);
				}

				let fingureData = {};
				if (data) {

					// save scanned data in session
					$("#fingurCaptureSubmit").attr("disabled", false);
					// $("#fingurCapture").attr("disabled", true);
					$("#figurePrintMsg").html("Successfully Capture Finger Print!").show().css("background", "green");
					alertify.success("Finger Print Successfully capture!");
					data.uId = $("#adhar_no").val();
					// fingureData["kycType"] = "AADHAAR_EKYC_BIOMETRIC";
					fingureData["biometricKYCData"] = data;
					console.log('capture Finger ::' + JSON.stringify(fingureData));
					sessionStorage.setItem("fingureData", JSON.stringify(fingureData));
					sessionStorage.setItem("consentCaptureDTTM", Date.now());


				} else {
					alertify.error("Device has some error ", msgTimeout);
					return;

				}

			} else {
				// console.log('Error xhr :', xhr);
			}
		},
		xhr.onerror = function() {
			if (redirectUrl !== null && url2Option != null) {
				captureFromMantraStartek(null, url2Option, url3Option, url4Option, url5Option);
			} else if (redirectUrl === null && url2Option != null) {
				captureFromMantraStartek(null, null, url3Option, url4Option, url5Option);
			} else if (url2Option === null && url3Option != null) {
				captureFromMantraStartek(null, null, null, url4Option, url5Option);
			} else if (url3Option === null && url4Option != null) {
				captureFromMantraStartek(null, null, null, null, url5Option);
			} else {
				// console.log('Error xhr no url work :', xhr);
				alert('We cannot detect any Fingerprint Device. Please install latest drivers.');
			}
		};
	xhr.send(PIDOPTS);
}



function xmlToJson(xmlString) {
	// console.log(xmlString);
	let data = {};
	let d = new Date();
	let x = xmlString.getElementsByTagName('DeviceInfo');
	let checdevice = x[0].getAttribute('errInfo');
	if (checdevice == !null) {
		return false;
	} else {
		data.uId = "";
		data.dpId = x[0].getAttribute('dpId');
		data.rdsId = x[0].getAttribute('rdsId');
		data.rdsVer = x[0].getAttribute('rdsVer');
		data.dc = x[0].getAttribute('dc');
		data.mi = x[0].getAttribute('mi');
		data.mc = x[0].getAttribute('mc');
		x = xmlString.getElementsByTagName('Skey')[0];
		data.Skey = x.childNodes[0]["data"];
		data.ci = x.getAttribute('ci');
		x = xmlString.getElementsByTagName('Hmac')[0];
		data.hMac = x.childNodes[0]["data"];
		data.encryptedSessionKey = "";
		x = xmlString.getElementsByTagName('Data')[0];
		data.encryptedPidBlock = x.childNodes[0]["data"];
		data.ts = d.getFullYear() + "-" + (d.getMonth().toLocaleString().length == 1 ? "0" : "") + (d.getMonth() + 1) + "-" + d.getDate() + "T" + d.getHours() + ":" + d.getMinutes() + ":" + d.getSeconds() + "+5:30";

		return data;
	}
}


// efd


function hideNomineeDetails() {
	console.log("nomineeDetails is called");
	$("#fingerprintdevice").hide();
	$("#nomineeDetails").show();
}




function nomineeDetailsBack() {
	console.log("nomineeDetails back is called");
	$("#nomineeDetails").hide();

	$("#fingerprintdevice").show();
}


function confirmDetailsBack() {
	console.log("confirmDetailsBack is called");
	$("#confirmDetails").hide();
	$("#nomineeDetails").show();
}

// added by Tirthankar

function getRolloutStatus() {

	$.ajax({
		url: getRolloutStatusURLFD,
		type: 'GET',
		datatype: 'json',
		data: {},
		success: function(result) {
			if (result.length) {
				// console.log('data fetch successfully');
				response = JSON.parse(result);
				// console.log('data fetch successfully ::
				// '+JSON.stringify(response));
				var rolloutStatusResponse = $.parseJSON(response.axisRolloutStatus);
				if (rolloutStatusResponse.status == "true") {
					if (rolloutStatusResponse.resObject.ekycStatus == 'Active') {
						if (rolloutStatusResponse.resObject.isAgree == 'false') {
							alertify.confirm()
								.setting({
									'label': 'I agree',

									'message': `
								   <br>
								   <br>a. This is to hereby certify that I shall not be engaged in any fraudulent Banking service or Account Opening activity of Axis Bank & shall always work in the best interest of Bank & Sahaj, abiding all  the rules & regulations as set by Bank & other  Regulatory authorities as may be applicable from time to time. 
								   <br>
								   <br>b. All Savings & Current Account opened by me will be with <b> Initial Deposit of Rs.500 only </b> & customers shall be duly informed to maintain the said balance in their account as minimum balance criteria or as communicated by Bank.
								   <br>
								   <br>c. If at any point of time Bank notifies that Accounts opened by me are forged & are not as per guidelines set by Bank & if my user l id gets “Blocked” permanently, I will  not claim or  seek refund of the  rollout amount or any payments made to Sahaj for availing Sahaj portal & it’s services relating -with Axis Bank services.
								   <br>
								   <br>d. The notice once accepted duly stands valid till such time  Axis Bank service is “Active” in Sahaj portal or till the date of my last association as a franchisee of Sahaj, whichever is earlier.`,
									'onok': function() {
										popUpAgree();
									}
								}).set('closable', false).set('labels', {
									ok: 'I agree'
								}).setHeader('<b> Acceptance </b> ').show();
						}
					} else {
						$("#agentDiv").hide();
						alertify.error("Your Registration with the Bank is in process. Please wait for some time or contact Customer Care!", msgTimeout);
					}

					let enqReq = {};
					enqReq["agentId"] = rolloutStatusResponse.resObject.ekycAgentId;
					enqReq["partnerId"] = "SAHAJRL";
					enqReq["terminalId"] = rolloutStatusResponse.resObject.ekycTerminalId;
					// console.log(JSON.stringify(enqReq));
					sessionStorage.setItem('metadata', JSON.stringify(enqReq));
					sessionStorage.setItem('axisAgentId', rolloutStatusResponse.resObject.ekycAgentId);
					sessionStorage.setItem('axisTerminalId', rolloutStatusResponse.resObject.ekycTerminalId);
				} else {
					alertify.error("Agent is not registerd Please Activate your Id!", msgTimeout);
					$("#agentDiv").hide();
					redirectToAxisRegistrationPage();
				}
			} else {
				// console.log('not fetch data');
			}
		},
		error: function(xhr, status, error) {
			alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
			$('#overlay').hide();
		},
		complete: function(xhr, status) {
			$('#overlay').hide();
		}
	});
}

function redirectToAxisRegistrationPage() {
	var pathname = window.location.pathname;
	if (pathname != "/web/guest/financial-services") {
		window.location.href = window.location.origin + "/web/guest/bbps?action=axisBcRollOut";
	}
}

function fdBooking() {
	console.log("fdBooking is called");
	$("#agentDiv").hide();
	$("#fdBooking").show();
}


//go to fd menu 
function showFdHomeScreen() {
	console.log("showFdHomeScreen is called");
	$("#acknowledgement").hide();
	$("#print_acknowledgement").hide();
	$("#fdCalculate").hide();

	
	$("#agentDiv").show();
}


// on clicking fd booking button agent validation is called
// using the axisAgentId | axisTerminalId stored in session
function verifyFdAgent() {
	$("#agentDiv").hide();
	$("#fdCalculator").show();
	console.log("fdBooking is called");
	$('#overlay').show();

	$.ajax({
		url: validateAgentURL,
		type: 'GET',
		datatype: 'json',
		data: {
			"agentId": sessionStorage.getItem('axisAgentId'),
			"terminalId": sessionStorage.getItem('axisTerminalId')
		},
		success: function(result) {
			if (result.length) {
				$('#overlay').hide();
				response = JSON.parse(result);
				// console.log('varifyAgent response ::
				// '+JSON.stringify(response));
				if (response.data.validationResult) {
					alertify.success("Agent is Successfully verified!", msgTimeout);
					$("#agentDiv").hide();
					$("#normal_customer").prop("checked", true);
					$("#depositYmd").prop("checked", true);
					$("#fdCalculator").show();
					$("#authToken").val(response.data.token);

					// storing agent validation details in session
					sessionStorage.setItem("agent_details", result);
					getFdMasterData();
					$("#dateOfFixedDeposit").text($.datepicker.formatDate('dd M yy', new Date()));
//					$("#dateOfFixedDepositCalc").text($.datepicker.formatDate('dd M yy', new Date()));

					// Create days dropdown
					var totalDays = 31;
					for (var i = 0; i < totalDays; i++) {
						// creates option tag
						jQuery('<option/>', {
							value: i,
							html: i
						}).appendTo('#selectDay');
					}


					for (var i = 0; i < totalDays; i++) {
						// creates option tag
						jQuery('<option/>', {
							value: i,
							html: i
						}).appendTo('#selectDayfc');
					}



					for (var i = 0; i < totalDays; i++) {
						// creates option tag
						jQuery('<option/>', {
							value: i,
							html: i
						}).appendTo('#selectDay_accdetails');
					}
				} else {
					alertify.error("Agent is not verified!", msgTimeout);
				}
			} else {
				alertify.error("Our Some Error has occurred. Please try after some time!", msgTimeout)
				$("#agentDiv").show();
				$("#fdCalculator").hide();
			}
		},
		error: function(xhr, status, error) {
			alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
			$('#overlay').hide();
		},
		complete: function(xhr, status) {
			$('#overlay').hide();
		}
	});
}

function getFdMasterData() {
	$.ajax({
		url: fetchAxisBCMasterURL,
		type: 'GET',
		datatype: 'json',
		success: function(result) {
			if (result.length) {
				master_json = JSON.parse(JSON.parse(result));
				// console.log(master_json.data)
				// master_data=master_json;
				master_data = {}
				master_data = master_json.data;
				sessionStorage.setItem("axis_fd_master", JSON.stringify(master_data));
				response = master_data["MaturityInstructionMaster"];
				response_nom_rel=master_data["nomineeRelationshipMaster"];
				response_gur_rel=master_data["guardianRelationshipMaster"];

				loadData("fdType", response, "Select FD Type");
				loadData("fdType_accdetails", response, "Select FD Type");
				
				//load nom relations 
				
				loadData("relationWithNominee", response_nom_rel, "Select Nominee Relationship");
				//load guardian rel
				loadData("relationship", response_gur_rel, "Select Guardian Relationship");


				// ////////////

				// ///////////
			}
		},
		error: function(xhr, status, error) {

		},
		complete: function(xhr, status) {
			$('#overlay').hide();
		}
	});
}

function loadData(id, data, startStr) {
	$("#" + id).empty().append("<option value=''>" + startStr + "</option>");
	$(data).each(function() {
		$("<option />", {
			val: this.value,
			text: this.key
		}).appendTo("#" + id);
	});
}


//fd cal flow 


function fdCalculator() {
	console.log("fdCalculator is called");
	$("#dateOfFixedDepositCalc").text($.datepicker.formatDate('dd M yy', new Date()));
	//add days here 

	var totalDays = 31;
	for (var i = 0; i < totalDays; i++) {
		// creates option tag
		jQuery('<option/>', {
			value: i,
			html: i
		}).appendTo('#selectDayfc');
	}

	$("#agentDiv").hide();

	$("#fdCalculate").show();

}


//on submitting the fd details this method is called
function fdCalcululate() {
	console.log("fdCalcululate is called");
	$('#overlay').show();
	var typeOfCustomer = $('input[name="seniorCitizenfc"]:checked').val();
	var typeOfFd = $("#fdTypefc").val();
	var amountDeposit = $("#amountDepositfc").val();
	var fdTenure = $('input[name="depositTenurefc"]:checked').val();
	var fdYear = $("#selectYearfc").val();
	var fdMonths = $("#selectMonthfc").val();
	var fdDays = $("#selectDayfc").val();
	var proceedToNext = true;

	console.log("typeOfCustomer: " + typeOfCustomer);
	console.log("typeOfFd: " + typeOfFd);
	console.log("amountDeposit: " + amountDeposit);
	console.log("fdTenure: " + fdTenure);
	console.log("fdYear: " + fdYear);
	console.log("fdMonths: " + fdMonths);
	console.log("fdDays: " + fdDays);

	if (typeOfFd == "") {
		proceedToNext = false;
		alertify.error("Type of Fixed Deposit is not allowed to be empty", msgTimeout);
	}

	
	if ($('input[name="seniorCitizenfc"]:checked').length===0) {
		proceedToNext = false;
		alertify.error("Select Customer Type", msgTimeout);
	}


	//tenure check 
	// Calculate the total number of months for the given tenure


	// Convert string values to integers or floats, handling empty strings
	var parsedYear = parseInt(fdYear, 10) || 0; // Default to 0 if it's an empty string or cannot be parsed
	var parsedMonths = parseInt(fdMonths, 10) || 0; // Default to 0 if it's an empty string or cannot be parsed
	var parsedDays = parseFloat(fdDays) || 0; // Default to 0 if it's an empty string or cannot be parsed



	var totalMonths = parsedYear * 12 + parsedMonths;

	// Add the additional months based on the number of days
	if (fdDays > 0) {
		var extraMonths = parsedDays / 30; // Round up to the nearest whole month

		totalMonths += extraMonths;
	}

	if (totalMonths >= 6 && totalMonths <= 10 * 12) {
		console.log("The given tenure is more than 6 months and less than 10 years.");
	} else {
		console.log("The given tenure does not meet the criteria.");
		proceedToNext = false;

		alertify.error("Tenure should be Minimum 6 months and maximum 120 months(10 Years)", msgTimeout);

	}


	// tenure check end 

	//calc



	if (amountDeposit == "" | amountDeposit < 5000) {
		proceedToNext = false;
		alertify.error("Enter Amount", msgTimeout);
	}




	if (fdTenure == "yymmdd") {
		if ((fdYear == "0" && fdMonths == "0" && fdDays == "0") || (fdYear == "0" && fdMonths == "0" && fdDays != "0")) {
			alertify.error("Select number of Years or Months", msgTimeout);
			proceedToNext = false;
		}
	}

	//	else {
	//		if(fdDays == "0"){
	//			alertify.error("Select number of Days", msgTimeout);
	//			proceedToNext = false;
	//		} 
	//	}
	else {
		$("#depositDaysOnly_accdetails").prop("checked", true);
		//		if(fdDays == "0"){
		//			alertify.error("Select number of Days", msgTimeout);
		//			proceedToNext = false;
		//		} 
		//		
		//		else {
		////			$("#depositDaysOnly_accdetails").prop("checked", true);
		//		}
	}




	//fd details save 
	$.ajax({
		url: fdCalculatorURL,
		type: 'POST',
		datatype: 'json',
		data: {
			"seniorCitizen": typeOfCustomer,
			"amountDeposit": amountDeposit,
			"fdYear": fdYear,
			"fdMonths": fdMonths,
			"fdDays": fdDays

		},
		success: function(result) {
			console.log("fdCalculatorURL result", result);


			//			 {"data":{"FDmaturityDetails":{"depositAmt":"64781","maturityAmt":"68748.00",
			//				 "intRate":"5.1000","interestAmt":"3967.00","maturityDate":"06-12-2024 00:00:00"}}}

			// ms response
			if (result.length) {
				var response = JSON.parse(result);
				console.log("response:: ", response);

				console.log("fdCalculatorURL FDmaturityDetails:: ", response.data.FDmaturityDetails);

				$("#mv_fc").text(response.data.FDmaturityDetails.maturityAmt);
				$("#roi_fc").text(response.data.FDmaturityDetails.intRate);
				$("#md_fc").text(response.data.FDmaturityDetails.maturityDate);

				$('#fd_mat_details').toggle();




			} else {
				alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
			}
			$('#overlay').hide();
		},
		error: function(xhr, status, error) {
			alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
			$('#overlay').hide();
		},
		complete: function(xhr, status) {
			$('#overlay').hide();
		}
	});


	$('#overlay').hide();
}



// fd cal end 




// on submitting the fd details this method is called
function fdCalculatorSubmit() {
	console.log("fdCalculatorSubmit is called");
	
	var typeOfCustomer = $('input[name="seniorCitizen"]:checked').val();
	var typeOfFd = $("#fdType").val();
	var amountDeposit = $("#amountDeposit").val();
	var fdTenure = $('input[name="depositTenure"]:checked').val();
	var fdYear = $("#selectYear").val();
	var fdMonths = $("#selectMonth").val();
	var fdDays = $("#selectDay").val();
	var proceedToNext = true;

	console.log("typeOfCustomer: " + typeOfCustomer);
	console.log("typeOfFd: " + typeOfFd);
	console.log("amountDeposit: " + amountDeposit);
	console.log("fdTenure: " + fdTenure);
	console.log("fdYear: " + fdYear);
	console.log("fdMonths: " + fdMonths);
	console.log("fdDays: " + fdDays);

	
	//error for empty customer type 
	
	
	if ($('input[name="seniorCitizen"]:checked').length===0) {
		proceedToNext = false;
		alertify.error("Select Customer Type", msgTimeout);
	}

	//tenure check 
	// Calculate the total number of months for the given tenure


	// Convert string values to integers or floats, handling empty strings
	var parsedYear = parseInt(fdYear, 10) || 0; // Default to 0 if it's an empty string or cannot be parsed
	var parsedMonths = parseInt(fdMonths, 10) || 0; // Default to 0 if it's an empty string or cannot be parsed
	var parsedDays = parseFloat(fdDays) || 0; // Default to 0 if it's an empty string or cannot be parsed



	var totalMonths = parsedYear * 12 + parsedMonths;

	// Add the additional months based on the number of days
	if (fdDays > 0) {
		var extraMonths = parsedDays / 30; // Round up to the nearest whole month
		totalMonths += extraMonths;
	}

	if (totalMonths >= 6 && totalMonths <= 10 * 12) {
		console.log("The given tenure is more than 6 months and less than 10 years.");
	} else {
		console.log("The given tenure does not meet the criteria.");
		proceedToNext = false;
		alertify.error("Tenure should be Minimum 6 months and maximum 120 months(10 Years)", msgTimeout);
	}


	// tenure check end 

	if (typeOfFd == "") {
		proceedToNext = false;
		alertify.error("Type of Fixed Deposit is not allowed to be empty", msgTimeout);
	}

	if (amountDeposit == "" | amountDeposit < 5000) {
		proceedToNext = false;
		alertify.error("Minimum Amount Should be 5000", msgTimeout);
	}

	if (typeOfCustomer == "N") {
		$("#normal_customer_accdetails").prop("checked", true);
	} else {
		$("#sc_customer_accdetails").prop("checked", true);
	}

	$('#fdType_accdetails').val(typeOfFd).attr("selected", "selected");

	//set confirm details data
	document.getElementById('deposit').textContent = amountDeposit;
	document.getElementById('deposit_ack').textContent = amountDeposit;


	$("#amountDeposit_accdetails").val(amountDeposit);

	if (fdTenure == "yymmdd") {
		if ((fdYear == "0" && fdMonths == "0" && fdDays == "0") || (fdYear == "0" && fdMonths == "0" && fdDays != "0")) {
			alertify.error("Select number of Years or Months", msgTimeout);
			proceedToNext = false;
		} else {
			$("#depositDropdown_accdetails").prop("checked", true);
		}
	} else {
		$("#depositDaysOnly_accdetails").prop("checked", true);
		//		if(fdDays == "0"){
		//			alertify.error("Select number of Days", msgTimeout);
		//			proceedToNext = false;
		//		} 
		//		
		//		else {
		////			$("#depositDaysOnly_accdetails").prop("checked", true);
		//		}
	}

	$("#selectYear_accdetails").val(fdYear).attr("selected", "selected");
	$("#selectMonth_accdetails").val(fdMonths).attr("selected", "selected");
	$("#selectDay_accdetails").val(fdDays).attr("selected", "selected");

	//disable so that on this page they can not select it again

	$("#selectYear_accdetails").prop("disabled", true);
	$("#selectMonth_accdetails").prop("disabled", true);
	$("#selectDay_accdetails").prop("disabled", true);
	$("#fdType_accdetails").prop("disabled", true);
	$("#amountDeposit_accdetails").prop("disabled", true);

	//set confirm details data
	var tenure_text = ($('#selectYear').val() == '0' ? '' : $('#selectYear').val() + ' year ') + ($('#selectMonth').val() == '0' ? '' : $('#selectMonth').val() + ' month ') + ($('#selectDay').val() == '0' ? '' : $('#selectDay').val() + ' day');
	document.getElementById('tenure').textContent = tenure_text;
	sessionStorage.setItem("tenure", JSON.stringify(tenure_text));

	console.log("fdCalculatorURL print_pd");
	document.getElementById('tenure_ack').textContent = tenure_text

	//fd details save
	if(proceedToNext){
		$('#overlay').show();
		$.ajax({
			url: fdCalculatorURL,
			type: 'POST',
			datatype: 'json',
			data: {
				"seniorCitizen": typeOfCustomer,
				"amountDeposit": amountDeposit,
				"fdYear": fdYear,
				"fdMonths": fdMonths,
				"fdDays": fdDays
			},
			success: function(result) {
				console.log("fdCalculatorURL result", result);

				// ms response
				if (result.length) {
					var response = JSON.parse(result);
					console.log("response:: ", response);
					console.log("fdCalculatorURL FDmaturityDetails:: ", response.data.FDmaturityDetails);
					sessionStorage.setItem("FDmaturityDetails", JSON.stringify(response.data.FDmaturityDetails));
					//set confirm details data
					document.getElementById('mautiry').textContent = response.data.FDmaturityDetails.maturityAmt;
					document.getElementById('mautiry_ack').textContent = response.data.FDmaturityDetails.maturityAmt;
					document.getElementById('interest_rate_ack').textContent = response.data.FDmaturityDetails.intRate;
					document.getElementById('maturityDate_ack').textContent = response.data.FDmaturityDetails.maturityDate;
					sessionStorage.setItem("maturityDate", JSON.stringify(response.data.FDmaturityDetails.maturityDate));
					document.getElementById('start_date').textContent = $.datepicker.formatDate('dd M yy', new Date());
					document.getElementById('matur_ins').textContent = typeOfFd;
					document.getElementById('matur_ins_ack').textContent = typeOfFd;
					
					$("#fdMaturityValue").text(response.data.FDmaturityDetails.maturityAmt);
					$("#fdRateOfInterestRate").text(response.data.FDmaturityDetails.intRate+"%");
					$("#fdMaturityDate").text(response.data.FDmaturityDetails.maturityDate);
					$("#dateOfFixedDeposit_accdetails").text($.datepicker.formatDate('dd M yy', new Date()));
					$("#fdCalculator").hide();
					$("#accountDetails").show();
				} else {
					alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
					$("#fdCalculator").show();
					$("#accountDetails").hide();
				}
			},
			error: function(xhr, status, error) {
				alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
				$('#overlay').hide();
			},
			complete: function(xhr, status) {
				$('#overlay').hide();
			}
		});
	}
}


//calculate and save FD
// after entering account and fd details this is called to check eligiblity
function proceedToCdd() {

	var statusToProceed = true;
	console.log("proceedToCdd is called");

	$('#overlay').show();
	var accountNumber = $("#accountNumber").val();
	var confirmaccountNumber = $("#confirmaccountNumber").val();
	//	var typeOfCustomer = $('input[name="seniorCitizen_accdetails"]:checked').val();
	var typeOfFd = $("#fdType_accdetails").val();
	var amountDeposit = $("#amountDeposit_accdetails").val();
	var fdTenure = $('input[name="depositTenure_accdetails"]:checked').val();
	var fdYear = $("#selectYear_accdetails").val();
	var fdMonths = $("#selectMonth_accdetails").val();
	var fdDays = $("#selectDay_accdetails").val();

	var regexForAccountNumber = /^[0-9]{4}1[0-9]{10}$/ ;
	var isValidAccountNumber = regexForAccountNumber.test(accountNumber);
	var isValidConfirmaccountNumber = regexForAccountNumber.test(confirmaccountNumber);

	
	
	
	
	if (typeof($("#accountNumber").val()) === 'string'  &&  $("#accountNumber").val() === '' ) {
			statusToProceed = false;
			alertify.error("Please enter Saving Account number", msgTimeout);
		}
	
	
	if (typeof($("#confirmaccountNumber").val()) === 'string'  &&  $("#confirmaccountNumber").val() === '' &&  $("#accountNumber").val() !== '' ) {
			statusToProceed = false;
			alertify.error("Please re-enter Saving Account number", msgTimeout);
		}
	
	
	if (  $("#accountNumber").val() !== '' &&  $("#confirmaccountNumber").val() !== ''   &&  (!isValidAccountNumber || !isValidConfirmaccountNumber)) {
		statusToProceed = false;
		alertify.error("Please enter valid saving account number", msgTimeout);
	}

	if (  ($("#accountNumber").val() !== '' && $("#confirmaccountNumber").val() !== '' ) && accountNumber != confirmaccountNumber) {
		statusToProceed = false;
		alertify.error("Account number entered does not match", msgTimeout);
	}

	if (fdTenure == "days") {
		fdYear = "0";
		fdMonths = "0";
	}

	console.log("accountNumber: " + accountNumber);
	console.log("confirmaccountNumber: " + confirmaccountNumber);
	//	console.log("typeOfCustomer: "+typeOfCustomer);
	console.log("typeOfFd: " + typeOfFd);
	console.log("amountDeposit: " + amountDeposit);
	console.log("fdTenure: " + fdTenure);
	console.log("fdYear: " + fdYear);
	console.log("fdMonths: " + fdMonths);
	console.log("fdDays: " + fdDays);


	//set confirm details data
	console.log("proceedToCdd adding  account_number:: ", accountNumber.replace(/\d(?=\d{4})/g, 'X'));

	document.getElementById('account_number').textContent = accountNumber.replace(/\d(?=\d{4})/g, 'X');
	document.getElementById('account_number_ack').textContent = accountNumber.replace(/\d(?=\d{4})/g, 'X');

	if (statusToProceed) {
		sessionStorage.setItem("accountNumber", accountNumber);
		//		sessionStorage.setItem("typeOfCustomer", typeOfCustomer);
		sessionStorage.setItem("typeOfFd", typeOfFd);
		sessionStorage.setItem("amountDeposit", amountDeposit);
		sessionStorage.setItem("fdTenure", fdTenure);
		sessionStorage.setItem("fdYear", fdYear);
		sessionStorage.setItem("fdMonths", fdMonths);
		sessionStorage.setItem("fdDays", fdDays);

		$.ajax({
			url: fdProductEligibilityURL,
			type: 'GET',
			datatype: 'json',
			data: {
				"accountNumber": sessionStorage.getItem("accountNumber"),
				//				"typeOfCustomer": sessionStorage.getItem("typeOfCustomer"),
				"typeOfFd": sessionStorage.getItem("typeOfFd"),
				"amountDeposit": sessionStorage.getItem("amountDeposit"),
				"fdTenure": sessionStorage.getItem("fdTenure"),
				"fdYear": sessionStorage.getItem("fdYear"),
				"fdMonths": sessionStorage.getItem("fdMonths"),
				"fdDays": sessionStorage.getItem("fdDays"),
				"agentId": sessionStorage.getItem('axisAgentId'),
				"terminalId": sessionStorage.getItem('axisTerminalId')
			},
			success: function(result) {
				//productEligibilityResponse this will have applicationReferenceId use it for DB entry 
				console.log(result);
				var response = JSON.parse(result);
				// console.log(response);
				var productEligibilityResponse = $.parseJSON(response.fdProductEligibilityResponse);
				// console.log(productEligibilityResponse);

				// ms response
				if (productEligibilityResponse.status == "Success") {
					var responseNew = JSON.parse(productEligibilityResponse.resObject);

					// 3rd party api response
					if (responseNew.statusCode == "200") {
						alertify.success(responseNew.message, msgTimeout);
						sessionStorage.setItem("fdApplicationReferenceId", responseNew.data.applicationReferenceId);
						sessionStorage.setItem("consentType", responseNew.data.consentType);

						// $("#opt_msg").show().html(opt_msg);
						$("#accountDetails").hide();
						$("#aadharNumber").show();
					} else {
						alertify.error(responseNew.message, msgTimeout);
					}
				} else if (productEligibilityResponse.status == "Failure") {
					var responseNew = JSON.parse(productEligibilityResponse.resObject);
					console.log("responseNew::", responseNew);

					if (responseNew.statusCode == 401) {
						alertify.error(responseNew.message, msgTimeout);
					} else {
						console.log("responseNew.errors[0]::", responseNew.errors[0]);
						alertify.error(responseNew.errors[0], msgTimeout);
					}
				} else {
					alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
				}
				$('#overlay').hide();
			},
			error: function(xhr, status, error) {
				alertify.error("Some Error has occurred. Please try after some time!", msgTimeout);
				$('#overlay').hide();
			},
			complete: function(xhr, status) {
				$('#overlay').hide();
			}
		});
	}

	$('#overlay').hide();
}

$("body").on("click", "#adhar_consent", function() {
	if ($(this).is(":checked")) {
		alertify.confirm('Aadhaar Declaration!', `
			   Customer Clause:
			   <br>
			   <br>a. I hereby state that I have no objection in authenticating myself with Aadhaar based authentication system and consent to providing my Aadhaar Number, Biometric and/or (One Time Pin) OTP data (and/or any similar authentication mechanism) for Aadhaar Based authentication for the purposes of: (i) availing of the Banking Service from Axis Bank;  (ii) seeding my new account with NPCI mapper to enable receiving of Direct Benefit Transfer (DBT) including LPG Subsidy from Govt. of India (GOI) into my new account.
			   <br>
			   <br>b. I hereby give my consent to and authorize Axis Bank Ltd. to fetch my personal details, mobile number & email address from UIDAI. I also explicitly authorize Axis Bank Ltd. to share these details with their registered Business Correspondent partner/agent (of my choice), only and solely for the purpose of completing account opening process and I understand that Axis Bank shall ensure security & confidentiality of my personal identity data, for all other purposes.
			   <br>
			   <br>c. I also understand that the Biometric and/or (One Time Pin) OTP (and/or any similar authentication mechanism) I may provide for authentication shall be used only for authenticating my identity through Aadhaar Authentication system for that specific transaction and for no other purposes.
			   <br>
			   <br>d. I In addition, I provide my consent to Axis Bank to-
			   <br>i. Use my Registered Mobile Number in the bank records for sending SMS alerts to me.
			   <br>ii. Link the Aadhaar Number to all my existing/new/future accounts and customer profile (CIF) with Axis Bank.
			   <br>
			   <br>e. I understand that my information submitted to Axis Bank herewith shall not be used for any purpose other than mentioned above.
			   <br>
			   <br>f. I hereby declare that all the above information voluntarily furnished by me is true, correct and complete.
			   <br>
			   <br>g. I understand that Axis Bank may disclose information about my account, if required or permitted by law, rule or regulations, or at the request of any public or regulatory authority or if such disclosure is required for the purpose of preventing frauds, or in public interest, without specific consent of the account holder/s`,
			function() {
				$("#bioInit").attr("disabled", false);
			},
			function() {
				$("#bioInit").attr("disabled", true);
				$("#adhar_consent").prop("checked", false);
			});

		alertify.alert('Declaration Reading!', 'Please Read the declaration in a language that customer understands');

	} else {
		// console.log('inside third function');
		$("#bioInit").attr("disabled", true);
	}
});


// on clicking Proceed with Biometric Authentication
// validate aadhaar and proceed for finger print capture
$("body").on("click", "#bioInit", function() {
	if ($("#adhar_no").val().length == 0) {
		alertify.error("Enter Aadhar Number", msgTimeout);
		return
	}

	var isvalid = $("#adhar_no").val().length == 12 || $("#adhar_no").val().length == 16;
	if (!isvalid) {
		$("#adhar_no").focus();
		/* $("#adhar_msg").show(); */
		if ($("#adhar_no").val().length < 12) {
			alertify.error("Please Enter valid Aadhar Number", msgTimeout);
		}
		if ($("#adhar_no").val().length > 12) {
			alertify.error("Please Enter Valid VID Number", msgTimeout);
		}
		if ($("#adhar_no").val().length == 0) {
			alertify.error("Enter Aadhar Number", msgTimeout);
		}
		return
	} else if (!validateAdhar($("#adhar_no").val())) {
		if ($("#adhar_no").val().length == 12) {
			alertify.error("Please enter a valid Aadhaar Number!", msgTimeout);
		} else {
			alertify.error("Please enter a valid VID Number!", msgTimeout);
		}

		return
	} else {
		$("#adhar_msg").hide();
	}

	if (!$('#adhar_consent').is(":checked")) {
		alertify.error("Please select Aadhaar Decleration!", msgTimeout);
		return
	}

	$("#aadharNumber").hide();
	$("#fingerprintdevice").show();

});

function validateAdhar(str) {
	var regexForAadhar = /^[2-9]{1}[0-9]{3}[0-9]{4}[0-9]{4}$/;
	if (str.length > 12) {
		return true;
	}
	var validAadhar = regexForAadhar.test(str);
	if (!validAadhar) {
		return false;
	}
	return true;
}
